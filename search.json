[{"title":"Arch Linux 安装","url":"/2023/03/12/ArchLinux%E5%AE%89%E8%A3%85/","content":"验证引导模式ls /sys/firmware/efi/efivars# 或efivar -l\n命令结果显示了目录且没有报告错误，则系统以 UEFI 模式引导。如果目录不存在，则系统可能以 BIOS 模式 (或 CSM 模式) 引导。如果系统未以您想要的模式引导启动，请参考您的主板说明书。\nvmware记得开efi\n无线网络连接iwctl                       #执行iwctl命令，进入交互式命令行device list                 #列出设备名，比如无线网卡看到叫 wlan0station wlan0 scan          #用wlan0网卡扫描网络station wlan0 get-networks  #列出网络station wlan0 connect 无线网名字    #连接网络名字 输入密码exit或者quit                #成功后退出\nping 一下某个网站 看看是否连接成功\n换源#设置中科大源vim /etc/pacman.d/mirrorlistServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$archpacman -Syy\n\n更新系统时间timedatectl set-ntp true \n\n硬盘分区fdisk -l  #查看分区fdisk /dev/sda #分区，也可以用cfdisk# 编号自定义# 大小 +512MB +4Gp #打印分区信息w #保存 \n\n格式化分区mkfs.vfat /dev/sda1 mkswap /dev/sda2mkfs.ext4 /dev/sda3swapon /dev/sda2\n\n挂载分区mount /dev/sda3 /mnt mkdir /mnt/bootmount /dev/sda1 /mnt/boot\n\n安装秘钥pacman -S archlinux-keyring\n安装基础包pacstrap /mnt base base-devel linux linux-firmware dhcpcdpacstrap /mnt linux linux-firmware linux-headers base base-devel vim bash-completion\n\n配置fstabgenfstab -U /mnt &gt;&gt; /mnt/etc/fstabcat /mnt/etc/fstab\n\n切根arch-chroot /mnt\n\n设置时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc #同步时间\n\n安装软件pacman -S vim dialog wpa_supplicant ntfs-3g networkmanager netctl\n\n设置语言vim /etc/locale.gen# 把想要设置的语言注释放开en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8locale-gen echo LANG=en_US.UTF-8 &gt; /etc/locale.conf\n\n设置主机名字echo arch &gt; /etc/hostname\n\n配置hosts127.0.0.1 localhost::1 localhost127.0.1.1 主机名字.localdomain [主机名字]\n\n设置root 密码passwd \n安装软件pacman -S intel-ucodepacman -S os-prober pacman -S grub efibootmgr\n\ngrub# 虚拟机如果没开efi用这个，否则可以和物理机一致grub-install --target=i386-pc /dev/sda物理机  grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUBgrub-mkconfig -o /boot/grub/grub.cfg#物理机如果是双系统，安装完grub后没发现另一个系统vim /etc/defalut/grub#把GRUB_DISABLE_OS_PROBER=false的注释去掉grub-mkconfig -o /boot/grub/grub.cfgcat /boot/grub/grub.cfg\n\n安装sshsudo pacman -S opensshvim /etc/ssh/sshd_config#添加PermitRootLogin yes#保存退出#开启ssh服务systemctl enable sshd #下次开机开启systemctl start sshd #现在开启\n\n退出并取消挂载重新启动exitumount -R /mnt #取消挂载reboot #物理机拔u盘\n\n\n驱动和桌面环境#安装显卡 驱动和openGLsudo pacman -S nvidia nvidia-utils#桌面环境sudo pacman -S xorg plasma kde-applications sddm networkmanager network-manager-appletsudo systemctl enable sddmsudo systemctl disable netctlsudo systemctl enable NetworkManager#安装软件pacman -S firefox ark gwenview git wget packagekit-qt5 packagekit docker appstream-qt appstream man neofetch net-tools\n\n\n\n","categories":["ArchLinux"],"tags":["Arch install"]},{"title":"Arch Linux 基础软件和桌面安装","url":"/2023/03/13/ArchLinux%E5%9F%BA%E7%A1%80%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85/","content":"升级所有包并安装浏览器sudo pacman -Syyu# 安装KDEsudo pacman -S plasma-meta konsole dolphin# 启动登录窗口sudo systemctl enable --now sddmsudo pacman -S firefox # 安装浏览器\n\n安装oh-my-zshsudo pacman -S curl gitsudo pacman -S zsh zsh-autosuggestions zsh-syntax-highlighting zsh-completionssh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;\n配置zshvim .zshrc# 在最后两行添加,别名可以写在这两行上面source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zshsource /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh  \n安装字体sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei wqy-microhei# 安装几个开源中文字体。sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra # 安装谷歌开源字体及表情\n安装基础软件sudo pacman -S ntfs-3g # 使系统可以识别 NTFS 格式的硬盘sudo pacman -S ark unrar # 压缩软件。在 dolphin 中可用右键解压压缩包sudo pacman -S packagekit-qt5 packagekit appstream-qt appstream # Discover（软件中心）sudo pacman -S gwenview # 图片查看器\n\n安装yay工具，用于安装aur中的包sudo pacman -S archlinuxcn-keyring # cn 源中的签名（archlinuxcn-keyring 在 archlinuxcn）sudo pacman -S yay # yay 命令可以让用户安装 AUR 中的软件（yay 在 archlinuxcn）\n\nSDDM修改主题sudo vim /usr/lib/sddm/sddm.conf.d/default.confcurrent = breeze\n\n安装输入法sudo pacman -S fcitx5-im # 输入法基础包组sudo pacman -S fcitx5-chinese-addons # 官方中文输入引擎sudo pacman -S fcitx5-material-color # 输入法主题#sudo pacman -S fcitx5-rime  rime-cloverpinyin  # rime输入法组件\n\n编辑&#x2F;etc&#x2F;，使输入法能够被识别sudo vim /etc/environment\nGTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus\n\nsudo pacman -S latte-dock # 安装dock工具sudo pacman -S kvantum # 建议安装，大部分主题需要利用它进一步优化QT界面\ncinnamon桌面安装sudo pacman -S xorg lightdm lightdm-webkit2-greeter cinnamon metacity gnome-terminal gnome-keyring blueberry gnome-screenshot system-config-printer chromium libreofficesudo pacman -S lightdm lightdm-webkt2-greeter cinnamon cinnamon-translations arc-gtk-theme papirus-icon-theme archlinux-wallpaper# 主题里面的Adapta-Nokto Numix-cinnamon-Semi-Transparent 托盘栏透明sudo vim /etc/lightdm/lightdm.conf# 搜索greeter-session greeter-session=lightdm-webkit2-greeterdisplay-setup-script=xrandr --output Virtual-1 --mode 1920x1080sudo systemctl enable lightdmyay -S tela-icon-theme lightdm-webkit-theme-aether mint-themes\nbudgie桌面安装# 参考了这个# sudo pacman -S ×f86-video-vmware xorg lightd m lightdm-gtk-greeter budgie-desktop gnome gnome-control-centersudo pacman -S budgie lightdm lightdm-webkit2-greeteryay -S sweet-cursors-theme-git \\materia-gtk-theme \\zorin-icon-themes\n\n\n图标： https://github.com/yeyushengfan258/Reversal-icon-themeROUNDED主题：https://store.kde.org/p/1352754/ROUNDED配套的Latte主题：https://www.pling.com/p/1571402壁纸：https://wallpaperscraft.com/catalog/anime/1920x1080透明标题栏：https://store.kde.org/p/1294013/\n","categories":["ArchLinux"],"tags":["ArchLinux"]},{"title":"ArchLinux安装旧版软件","url":"/2023/08/15/ArchLinux%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E6%9C%AC%E8%BD%AF%E4%BB%B6/","content":"AUR 安装旧版&#x2F;指定版本打开 AUR 包仓库 https://aur.archlinux.org/packages通过「关键字」找到要安装的包详情页面在包详情页面右侧，点击「查看更改」找到对应的版本，点击「Commit message」，进入版本详情找到「download」链接，下载解压下载的压缩包，并在解压后的目录内执行以下命令安装：\nmakepkg -ssudo pacman -U *.pkg.tar.zst\n特定版本禁止更新：在 &#x2F;etc&#x2F;pacman.conf 中的 IgnorePkg &#x3D; 中添加对应的包名，用空格分隔多个包名。参考：http://www.huasay.com/2020/08/05/manjaro-install-old-version/\n","categories":["archlinux"],"tags":["archlinux"]},{"title":"ArchLinux常用软件","url":"/2023/04/02/ArchLinux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/","content":"wps安装yay -S wps-office-mui-zh-cn wps-office-mime-cn wps-office-cn wps-office-fonts ttf-ms-fonts ttf-wps-fonts\n\n\n终端编辑器: vim\naur包管理器: yay\n图形界面编辑器: gedit\n网络连接: iw, wpa_ supplicant和dhcpcd\n电池优化: tlp\n声音管理: alsa-utils, pulseaudio, pavucontr\n图形界面服务: xorg、 xinit\n通知：dunst\n剪贴板：copyq\n搜索栏:dmenu(能快速搜索打开某个应用，一步到位，配合i3wm)\n顶部栏: polybar\ni3壁纸管理: feh (装gnome和kde这种有自带的工具，不需要它这个)\nxorg渲染工具: picom (gnome和kde这种也不需要它)\n终端模拟器: gnome-terminal (gnome桌面默认终端模拟器)、alacritty (使用GPU加速，可定制)\nshell: fish (比默认的bash强大好用，但是和bash脚本不兼容)、zsh (比bash 好用，不如fish，需要折腾配置后才能达到和fish类似的效果，好处是兼容bash脚本)\n终端下的文件浏览器: ranger (非常强大)\n图片查看和编辑:gthumb.\n类似Ps的图片编辑器:gimp\nSVG编辑器: inkscape\n视频剪辑:kdenlive(类似Pr)， openshot(稍微简单点)\n录屏和直播软件: obs\n摄像头:摄像头驱动自带fplay和ffmpeg图形界面操作的有cheese\n树状列出各级目录: tree\nlinux远程操作: ssh\n输入法框架: fcitx或者ibus (gnome自带ibus)\n输入法: sunpinyin\nMarkdown编辑器: typora\nC语言编译器: gcc\n项目构建和管理: make , cmake, maven, npm\nC++编译器: g++\n调试器: gdb\n虚拟机: virtualbox\n百度网盘: baidunetdisk\n数据库: mariadb (mysql的开源版)\n浏览器: chromium (谷歌浏览器开源版)- 键盘操作chromium: vimium插件\n视频播放器: vlc\n项目管理和版本控制器: git. subversion\n制作windows启动盘: woeusb\n发现电脑内的其他系统: os-prober\n访问远程Windows桌 面: rdesktop\ndos模拟器: dosemu\n原型工具: pencil\n路由跟踪: traceroute\nnslookup: arch在 dnsutils包里面，其他发行版应该在bind-utils里。\n网络工具: ifconfig、 route在net-tools中， nslookup,dig在dnsutils中，ftp,telnet等 在inetutils中,ip命令在iproute2中。\n手机投屏到电脑: scrcpy .\n电脑投屏到手机: vnc系列或者rdp系列，vnc服务端(电脑)x11vnc;客户端(手机)可以去应用商店搜vnc，vncviewer，”bVNC Free”。\n处理deb包: debtap\n终端256色打印图片: catimg\n图片转文本: chafa (有彩色，比catimg更清晰)\n图片转ASCII: jp2a\n下载器: uget， aria2\n安装terminfo: tic\n\n","categories":["ArchLinux"],"tags":["ArchLinux"]},{"title":"ArchLinux配置及问题","url":"/2023/03/20/ArchLinux%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%97%AE%E9%A2%98/","content":"启动后的配置工作# 添加archlinuxcn源vim /etc/pacman.conf #文件末尾添加两行：[archlinuxcn]Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch# 更新系统源pacman -Sy# 安装archlinuxcn秘钥pacman -S archlinuxcn-keyringpacman -S bash-completion #bash下命令自动补全#添加用户useradd -m -G wheel username#设置密码passwd username#配置sudopacman -S sudo# 设置软链接，把vim链接到viln -s /usr/bin/vim /usr/bin/vivisudo:/wheel#取消注释\n\n安装archlinuxcn-keyring报错pacman -S archlinuxcn-keyring如果报错，#用root用户执行以下命令rm -rf /etc/pacman.d/gnupgpacman-key --initpacman-key --populate archlinuxpacman-key --populate archlinuxcn\n文件相关的颜色配置sudo vim /etc/skel/.bashrc~/.bashrc# 编辑器设置为vimexport EDITOR=vim# 别名的定义alias pm=&#x27;pacman&#x27;alias ra=&#x27;ranger&#x27;alias c=&#x27;clear&#x27;alias ll=&#x27;ls -l --color=auto&#x27;alias ls=&#x27;ls --color=auto&#x27;alias la=&#x27;ls -a --color=auto&#x27;alias gs=&#x27;git status&#x27;alias gaa=&#x27;git add -A&#x27;alias gcm=&#x27;git commit -m&#x27;alias gll=&#x27;git pull&#x27;alias gsh=&#x27;git push&#x27;alias gla=&#x27;git log --graph --pretty=format:&quot;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&quot; --abbrev-commit --date=relative --all&#x27;alias ls=&#x27;ls --color=auto&#x27;alias grep=&#x27;grep --color=auto&#x27;alias egrep=&#x27;egrep --color=auto&#x27;alias fgrep=&#x27;fgrep --color=auto&#x27;[ ! -e ~/.dircolors ] &amp;&amp; eval $(dircolors -p &gt; ~/.dircolors)[ -e /bin/dircolors ] &amp;&amp; eval $(dircolors -b ~/.dircolors)\n\n安装xfce4桌面和lightdmsudo pacman -S xorg lightdm lightgdm-gtk-greeter lightdm-gtk-greeter-settings xfce4 xfce4-goodies\n\n检测不到另一个系统# 先确认是否安装os-prober# 如果没有安装，先进行安装sudo pacman -S os-prober# 编辑grub配置文件sudo vim /etc/default/grub# 把下面这行的注释去掉下面这行注释，如果没有就手动添加GRUB_DISABLE_OS_PROBER=false# 重新生成grub配置文件sudo grub-mkconfig -o /boot/grub/grub.cfg\n\n双系统时间不同步在linux系统中执行以下命令timedatectl set-local-rtc true\n\n安装fcitx5输入法sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-qt # 如果需要98版五笔，需要安装以下包sudo pacman -S fcitx5-table-extra\n\n编辑 /etc/environment 并添加以下几行，然后重新登录:\nsudo vim /etc/environmentGTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus\n\n\n\ndwm安装fcitx5 之后 浏览器不能输入中文# 在/etc/locale.conf里面添加下面一行即可LANG=zh_CN.UTF-8\n\n字体渲染sudo vim /etc/profile.d/freetype2.sh最后一行注释取消export FREETYPE_PROPERTIES=&quot;truetype:interpreter-version=40&quot;\n\nparu 反转查询结果sudo vim /etc/paru.conf取消下面注释BottomUp\n\n禁用Nvidia开源驱动sudo vim /etc/default/grub#在下面这行GRUB_CMDLINE_LINUX_DEFAULT添加  module_blacklist=nouveau\n生成配置文件，每次修改&#x2F;etc&#x2F;default&#x2F;grub文件后都要执行一下以下命令\ngrub-mkconfig -o /boot/grub/grub.cfg\n\n内核和驱动的相关问题：sudo pacman -S nvidiamhwd-kernel -lsudo mhwd-kernel -i linuxXXX rmc#其中，linuxXXX是指列出的最新版本内核，rmc是删除旧内核rebootsudo pacman -S nvidia linuxXXX-nvidia-XXX\n\nArch + DDE不能连接wifi#wifi连不上是因为NetWorkManager这个组件在连接wifi的时候会生成随机的mac地址，而dde里面和它配套的com.deepin.network这个包魔改过，不支持这个特性。禁用随机mac，sudo vim /etc/NetworkManager/MetworkManager.conf#新添加2行内容[device]wifi.scan-rand-mac-address=no#保存退出，重启下NetworkManager即可sudo systemctl restart NetworkManager\nGNOME桌面sudo pacman -S gnome tilix  gnome-tweaks#插件里面把一个user Themes的插件打开 可以修改默认shell主题#tweaks 里面窗口标题栏可以把最大化最小化调出来paru -S yaru-gnome-shell-theme yaru-icon-theme yaru-sound-themesudo pacman -S gnome-browerser-connector chrome-gnome-shell #插件#Applndicator and KStatusNotifierItem Support #托盘图标#dash to dock 桌面上显示dock#no overview at start-up 开机显示桌面#rounded window corners 圆角#blur my shell 切换桌面时壁纸#录制视频需安装 gst-plugin-pipewire#插件#dash to dock#blur my shell 工作区半透明#arcmenu 左边菜单集成#vitals 电脑各项信息#just perfection 减掉不必要的#app indicator 托盘图标#clipboard 剪切板记录#compiz 最小化最大化魔灯效果#cosmic 比dash to dock 流畅#input method panel fcitx的美化扩展#net speed\n\n字体相关sudo cp -r Fonts /usr/share/fonts/windowssudo fc-cache -f\n\ndwm状态栏设置while truedo    LI=`xbacklight | cut -d. -f1`    BA=`acpi | cut -d, -f2 | cut -d% -f1 | cut -d&quot; &quot; -f2`    SO=`amixer get Master | sed -n &#x27;$p&#x27; | cut -d] -f1 | cut -d[ -f2 | cut -d% -f1`    DA=`date | cut -d&quot; &quot; -f 1,2,3,5,6`    xsetroot -name &quot;Vol.$&#123;SO&#125;|Bal.$&#123;LI&#125;|Bat.$&#123;BA&#125;|$&#123;DA&#125;&quot;    sleep 1sdone &amp;\n\nFailed to start Load Kernel Modulesfile boot/vmlinuz-linux #查看当前引导所引导的内核版本#升级内核grub-install -target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUBgrub-mkconfig -o /boot/grub/grub.cfg\n\n双系统删除arch引导这里以win11+arch为例\nEFI文件夹里面的grub删除外面的grub不能删除，System Volume Information不能删除其他的都删除\n更换鼠标主题#安装主题paru breeze-purple-cursor-theme# 查找安装的主题find /usr/share/icons ~/.local/share/icons ~/.icons -type d -name &quot;cursors&quot;# 配置主题sudo vim /usr/share/icons/default/index.theme[icon theme]Inherits=Breeze_Purple\n\n\n\n安装alacritty主题#安装alacritty-colorschemeparu alacritty-colorscheme#克隆主题（下面是github上的两个主题库）git clone https://github.com/aaron-williamson/base16-alacritty.gitcp base16-alacritty/colors/* ~/.config/alacritty/colors/git clone https://github.com/eendroroy/alacritty-theme.gitcp alacritty-theme/themes/* ~/.config/alacritty/colors/#使用主题#$HOME/.config/alacritty/colors/ 目录下的都是主题文件，任选一个自己喜欢的alacritty-colorscheme apply xxx#查看当前使用的主题alacritty-colorscheme status\n\nssh问题# Failed to start OpenSSH server daemonsystemctl status sshd # 可以看到,有错误,但是没有显示详细信息:# 使用命令,定位错误详细信息sshd -t\n\nssh设置超时时间# 服务端阻止sudo vim /etc/ssh/sshd_config# 添加以下两行ClientAliveInterval 120 # 每隔120秒向客户端发送一个空包ClientAliveCountMax 720 # 总共发送720资空包# 重启sshd# 客户端阻止vim ~/.ssh/configServerAliveInterval 120\n\njournalctl查看日志journalctl -u sddm# 通过以上命令可以看到sddm运行版本库版本不正确# 通过 sudo pacman -Fy libstdc++.so.6查看文件在哪个包里面# 安装包时报错xxx需要 # 直接安装xxx# 问题解决完成后，sddm正常启动\n\n蓝牙问题#先把用户追加到组 lp中sudo usermod -a -G lp username\n\nbluetoothd[4365]: profiles/audio/vcp.c:vcp_init() D-Bus experimental not enabledbluetoothd[4365]: src/plugin.c:plugin_init() Failed to init vcp pluginbluetoothd[4365]: profiles/audio/mcp.c:mcp_init() D-Bus experimental not enabledbluetoothd[4365]: src/plugin.c:plugin_init() Failed to init mcp pluginbluetoothd[4365]: profiles/audio/bap.c:bap_init() D-Bus experimental not enabledbluetoothd[4365]: src/plugin.c:plugin_init() Failed to init bap plugin\n\n# 解决上面的问题sudo vim /etc/bluetooth/main.conf Experimental=true  # systemctl 不能启动 sudo modprobe -r btusb &amp;&amp; sudo modprobe btusb\n\n#用到的命令lspci -klsmod | grep btusbrfkill listsudo dmesg | grep Blue\n\nLinux安装idea下载对应版本解压到对应文件夹这里以/opt/idea为例配置idea.sh 在任何路径下启动vim .bashrc在最后添加以下两行export IDEA_HOME=/opt/ideaexport PATH=:$&#123;PATH&#125;:$&#123;IDEA_HOME&#125;/bin 配置完成后，想直接使用source ~/.bashrc\n\nzsh语法高亮source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zshsource /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh \n\nroot用户配置颜色cp /home/feng/.bashrc /home/feng/.bash_profile /root/vim /root/.bash_profile# 末尾添加export LS_COLORS=&quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.swp=00;90:*.tmp=00;90:*.dpkg-dist=00;90:*.dpkg-old=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:&quot;\n\nArchLinux配置静态ip方法一：用netctl配置静态ipsudo cp /etc/netctl/examples/ethernet-static /etc/netctl/enp0s3# enp0s3 为网卡名sudo vim /etc/netctl/enp0s3Description=&#x27;A basic static ethernet connection&#x27;Interface=enp0s3Connection=ethernetIP=staticAddress=(&#x27;192.168.1.102/24&#x27;)Gateway=(&#x27;192.168.1.1&#x27;)DNS=(&#x27;8.8.8.8&#x27; &#x27;8.8.4.4&#x27;)sudo netctl enable enp0s3sudo netctl start enp0s3# 停止并禁用 dhcp 服务。sudo systemctl stop dhcpcdsudo systemctl disable dhcpcd# 重新启动系统以使更改生效。\n\n方法二：使用systemd配置静态ipsudo vim /etc/systemd/network/enp0s3.network# 将 enp0s3 替换为您的网卡名称。 并且，添加以下行[Match]Name=enp0s3[Network]Address=192.168.1.102/24Gateway=192.168.1.1DNS=8.8.8.8DNS=8.8.4.4\n接下来，需要禁用 netctl\nsudo systemctl disable netctl# 禁用dhcp服务sudo systemctl stop dhcpcdsudo systemctl disable dhcpcd# 禁用NetworkManager服务sudo systemctl stop NetworkManagersudo systemctl disable NetworkManager\n然后，启用并启动 systemd-networkd 服务\nsudo systemctl enable systemd-networkdsudo systemctl start systemd-networkd# 最后重启系统\n\n安装wpsyay -S wps-office-mui-zh-cn \\wps-office-mime-cn \\wps-office-cn \\wps-office-fonts \\ttf-ms-fonts \\ttf-wps-fonts\nwps字体加粗显示错误解决办法# 降级freetype2（降至2.13.0）sudo pacman -U https://arch-archive.tuna.tsinghua.edu.cn/2023/06-26/extra/os/x86_64/freetype2-2.13.0-1-x86_64.pkg.tar.zst# 使用以下命令来忽略特定软件包的升级提示sudo vim /etc/pacman.conf# 在pacman.conf中添加如何代码,多个软件用空格隔开IgnorePkg = freetype2然后运行sudo pacman -Syu 后不再提示系统更新了。\n\nSyu报错# failed to synchronize all databases (unable to lock database)sudo rm -rf /var/lib/pacman/db.lck\n","categories":["ArchLinux"],"tags":["Arch config"]},{"title":"DELL安装arch找不到wifi","url":"/2023/07/22/DELL%E7%94%B5%E8%84%91linux%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/","content":"archlinux 安装完成后找不到wifi# 安装了以下软件yay -S b43-firmware b43-firmware-classic b43legacy-firmware# 下面这个好像没安装sudo pacman -S ndiswrapper ndiswrapper-dkms # 安装完成后重启，用nmtui就看到了wifi\n","categories":["ArchLinux"],"tags":["arch"]},{"title":"hyprland","url":"/2023/07/22/Hyprland/","content":"arch 依赖yay -S gdb ninja gcc cmake meson libxcb xcb-proto xcb-util xcb-util-keysyms libxfixes libx11 libxcomposite xorg-xinput libxrender pixman wayland-protocols cairo pango seatd libxkbcommon xcb-util-wm xorg-xwayland libinput libliftoff libdisplay-info cpio\n\n安装软件sudo pacman -S hyprland-git waybar  sway mpc gotop htop acpi rofi wipe mpv waylock wl-clipboard nemo imvwdisplays # 多显示器scrcpy # 投屏imv # 图片pipewire # obs 录屏时用到waypipe # 网络工具wlogout # powermenuparu -S swww volumectl# 首次使用，会创建对应配置文件，如果没有创建，再使用下面命令mkdir ~/.config/hyprcp /usr/share/hyprland/hprland.conf ~/.config/hypr/\n\n\n\n按键名字xev打开之后，按对应的键即可\n终端不能输入中文可以下载一个emacs test.txt\n浏览器用firefox,现在google-chrome 不能输入中文\nwayland下可以使用的软件可以参考以下网站https://arewewaylandyet.com\n声音sudo pacman -S pluseaudio alsa-utils pavucontrol\n\n\n\nhyprland可视化配置参考b站up主小柴aihttps://wwdd.lanzoue.com/ilfkF0y956mh\n6gj5 # 提取码tar -zxvf hyprconfig.tar.gz # 解压cd hyprconfig/./hyprconfig # 运行\n\n截屏和录屏截屏sudo pacman -S grim wl-clipboard notify-send # 输入grim就会截屏#区域截图保存到剪切板: grim -g &quot;$(slurp -d)&quot; - | wl-copy  #区域截图保存在路径: grim -g &quot;$(slurp -d)&quot; - &gt; &quot;/path/$(date +&#x27;%H:%M@%m-%d&#x27;).png&quot; #需要grim,slurp,wl-copy,忘记从哪位大佬那偷的了,超好用!grim -g &quot;$(slurp)&quot; - | swappy -f -\n\n\nimport osimport datetimefilename = str(datetime.datetime.now()).split(&#x27;.&#x27;)[0]os.system(f&#x27;grim ~/Pictures/&quot;&#123;filename&#125;&quot;.png&#x27;)os.system(f&#x27;wl-copy &lt; ~/Pictures/&quot;&#123;filename&#125;&quot;.png&#x27;)os.system(&quot;notify-send 截图一张&quot;)\n\n录屏sudo pacman -S obs-studio xdg-desktop-portal-hyprland\n\n视频mpvpaper -o &quot;no-audio --loop-playlist&quot; eDP-1 1.mp4\n\n问题如果是虚拟机，需要开启3D加速\n自用的配置文件https://gitee.com/ucg7086/myhyprconfigs\ngit clone https://gitee.com/ucg7086/myhyprconfigs.gitcd myhyprconfigs/.configcp -r hypr/ ~/.config/cp -r rofi/ ~/.config/cp -r waybar/ ~/.config/ \n\n参考https://gitee.com/cizel/dotfiles/https://gitee.com/afdwafexgwaef/my-dotfileshttps://github.com/0a00/hyprfileshttps://github.com/dragove/dotfiles\n","categories":["hyprland"],"tags":["hyprland"]},{"title":"Linux命令","url":"/2023/03/23/Linux%E5%91%BD%E4%BB%A4/","content":"命令帮助网址http://linux.51yip.com/\n快捷键ctrl+a  光标回到行首ctrl+e  光标回到行尾ctrl+f  光标向右移动一个字符 forwardsctrl+b  光标向左移动一个字符 behindctrl+u  删除光标处到行首的所有字符ctrl+k  删除光标处到行尾的所有字符ctrl+w  删除光标前的一个单词wordctrl+h  删除光标前的一个字符，相当于退格键# bash下 alt+r 删除整行esc+b   移动到当前单词的开头esc+f   移动到当前单词的结尾esc+t   当前单词向前移动\n\nvimvim编辑后发现没有权限:w !sudo tee %# &quot;%&quot;表示当前文件名，tee命令则表示把缓冲区的数据保存到当前文件\n\n终端下md文档插入图片![](./xxx.png)\n\nABCchattrchattr 修改文件在Linux第二扩展文件系统(E2fs)上的特有属性符号模式有+-&#x3D;[ASacdisu]几种格式.操作符+&#39;用来在文件已有属性的基础上增加选定的属性; -‘用来去掉文件上的选定的属性;而=&#39;用来指定该文件的唯一属性. 字符ASacdisu’用作文件新属性的选项: 不更新atime(A),同步更新(S),只能添加(a), 压缩(c),不可变(i),不可转移(d),删除保护(s)以及不可删除(u).\n-R    递归地修改目录以及其下内容的属性. 如果在递归目录时遇到了符号链接,遍历将跳过.-V    详尽地给出chattr的输出信息并打印出程序的版本.-vversion    设置文件系统的版本.\n当修改设置了’A’属性的文件时,它的atime记录不会改变. 这可以在笔记本电脑系统中避免某些磁盘I&#x2F;O处理.设置了a&#39;属性的文件只能在添加模式下打开用于写入. 只有超级用户可以设置或清除该属性. 设置了c’属性的文件在磁盘上由内核自动进行压缩处理. 从该文件读取时返回的是未压缩的数据. 对该文件的一次写入会在保存它们到磁盘之前进行数据压缩.设置了d&#39;属性的文件不能对其运行 dump(8) 程序进行备份. 设置了i’属性的文件不能进行修改:你既不能删除它, 也不能给它重新命名,你不能对该文件创建链接, 而且也不能对该文件写入任何数据. 只有超级用户可以设置或清除该属性.当删除设置了s&#39;属性的文件时,将对其数据块清零 并写回到磁盘上. 当修改设置了S’属性的文件时, 修改会同步写入到磁盘上;这与应用 到文件子系统上的sync&#39;挂载选项有相同的效果. 当删除设置了u’属性的文件时, 将会保存其内容. 这使得用户可以请求恢复被删除的文件.\n[root@localhost ~]# chattr +i nginx.conf                     #设置该文件不能进行任何形势的修改[root@localhost ~]# mv nginx.conf nginx.conf_bakmv: 无法将&quot;nginx.conf&quot; 移动至&quot;nginx.conf_bak&quot;: 不允许的操作[root@localhost ~]# lsattr nginx.conf                       #查看chattr设置的权限----i--------e- nginx.conf[root@localhost ~]# chattr -i nginx.conf                    #取消-i的权限设置[root@localhost ~]# lsattr nginx.conf                      #查看chattr设置的权限-------------e- nginx.conf\n# chattr +a /var/log/messages   #让某个文件只能往里面追加数据，但不能删除\ncp-a 此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于 dpR 参数组合。-d 复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。-r 或 –recursive：用于复制目录及其所有的子目录和文件，如果要复制目录，需要使用该选项。-i 或 –interactive：在复制前提示确认，如果目标文件已存在，则会询问是否覆盖，回答 y 时目标文件将被覆盖。。-u 或 –update：仅复制源文件中更新时间较新的文件。-v 或 –verbose：显示详细的复制过程。-p 或 –preserve：保留源文件的权限、所有者和时间戳信息。-f 或 –force：强制复制，即使目标文件已存在也会覆盖，而且不给出提示。-l 不复制文件，只是生成链接文件。-p 复制文件保留属性，不保留链接文件-r 递归拷贝\n# 拷贝所有文件，包括隐藏文件cp -av . /data/\nDdd可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。\n# 把文件写入u盘dd if=文件名 of=/dev/sdb# 或dd if=/path/xxx of=/dev/sdx status=progress &amp;&amp; sync# 注意：将ISO镜像文件写入U盘设备，必须写入时使用的是整个设备，而不是这个设备上的一个分区，如不是写入sdb设备下的sdb1或者sdb2分区，而是写入整个sdb设备。\ndfLinux df（英文全拼：disk free） 命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。-a, –all 包含所有的具有 0 Blocks 的文件系统–block-size&#x3D;{SIZE} 使用 {SIZE} 大小的 Blocks-h, –human-readable 使用人类可读的格式(预设值是不加这个选项的…)-H, –si 很像 -h, 但是用 1000 为单位而不是用 1024-i, –inodes 列出 inode 资讯，不列出已使用 block-k, –kilobytes 就像是 –block-size&#x3D;1024-l, –local 限制列出的文件结构-m, –megabytes 就像 –block-size&#x3D;1048576–no-sync 取得资讯前不 sync (预设值)-P, –portability 使用 POSIX 输出格式–sync 在取得资讯前 sync-t, –type&#x3D;TYPE 限制列出文件系统的 TYPE-T, –print-type 显示文件系统的形式-x, –exclude-type&#x3D;TYPE 限制列出文件系统不要显示 TYPE-v (忽略)–help 显示这个帮手并且离开–version 输出版本资讯并且离开\ndu显示指定的目录或文件所占用的磁盘空间\n-a, –all                              显示目录中个别文件的大小。-B, –block-size&#x3D;大小                  使用指定字节数的块-b, –bytes                            显示目录或文件大小时，以byte为单位。-c, –total                            除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。-D, –dereference-args                 显示指定符号链接的源文件大小。-H, –si                               与-h参数相同，但是K，M，G是以1000为换算单位。-h, –human-readable                   以K，M，G为单位，提高信息的可读性。-k, –kilobytes                        以KB(1024bytes)为单位输出。-l, –count-links                      重复计算硬件链接的文件。-m, –megabytes                        以MB为单位输出。-L&lt;符号链接&gt;, –dereference&lt;符号链接&gt;  显示选项中所指定符号链接的源文件大小。-P, –no-dereference                   不跟随任何符号链接(默认)-0, –null                             将每个空行视作0 字节而非换行符-S, –separate-dirs                    显示个别目录的大小时，并不含其子目录的大小。-s, –summarize                        仅显示总计，只列出最后加总的值。-x, –one-file-xystem                  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。-X&lt;文件&gt;, –exclude-from&#x3D;&lt;文件&gt;        在&lt;文件&gt;指定目录或文件。–apparent-size                        显示表面用量，而并非是磁盘用量；虽然表面用量通常会小一些，但有时它会因为稀疏文件间的”洞”、内部碎片、非直接引用的块等原因而变大。–files0-from&#x3D;F                        计算文件F中以NUL结尾的文件名对应占用的磁盘空间如果F的值是”-“，则从标准输入读入文件名–exclude&#x3D;&lt;目录或文件&gt;                 略过指定的目录或文件。–max-depth&#x3D;N                          显示目录总计(与–all 一起使用计算文件)当N为指定数值时计算深度为N，等于0时等同–summarize–si                                   类似-h，但在计算时使用1000 为基底而非1024–time                                 显示目录或该目录子目录下所有文件的最后修改时间–time&#x3D;WORD                            显示WORD时间，而非修改时间：atime，access，use，ctime 或status–time-style&#x3D;样式                      按照指定样式显示时间(样式解释规则同”date”命令)：full-iso，long-iso，iso，+FORMAT–help                                 显示此帮助信息并退出–version                              显示版本信息并退出\n# 查询该目录下所有资源的大小，包括压缩包的大小du -ah --max-depth=1\n\nEFfindfind 路径 [-type f] -name &quot;*.txt&quot;find 路径 [-type f] -name &quot;*.txt&quot; -o -name &quot;*.log&quot;# -o 表示或者\n参数说明 :\npath 是要查找的目录路径，可以是一个目录或文件名，也可以是多个路径，多个路径之间用空格分隔，如果未指定路径，则默认为当前目录。expression 是可选参数，用于指定查找的条件，可以是文件名、文件类型、文件大小等等。expression 中可使用的选项有二三十个之多，以下列出最常用的部份：-name pattern：按文件名查找，支持使用通配符 * 和 ?。-type type：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等。-size [+-]size[cwbkMG]：按文件大小查找，支持使用 + 或 - 表示大于或小于指定大小，单位可以是 c（字节）、w（字数）、b（块数）、k（KB）、M（MB）或 G（GB）。-mtime days：按修改时间查找，支持使用 + 或 - 表示在指定天数前或后，days 是一个整数表示天数。-user username：按文件所有者查找。-group groupname：按文件所属组查找。find 命令中用于时间的参数如下：-amin n：查找在 n 分钟内被访问过的文件。-atime n：查找在 n*24 小时内被访问过的文件。-cmin n：查找在 n 分钟内状态发生变化的文件（例如权限）。-ctime n：查找在 n*24 小时内状态发生变化的文件（例如权限）。-mmin n：查找在 n 分钟内被修改过的文件。-mtime n：查找在 n*24 小时内被修改过的文件。在这些参数中，n 可以是一个正数、负数或零。正数表示在指定的时间内修改或访问过的文件，负数表示在指定的时间之前修改或访问过的文件，零表示在当前时间点上修改或访问过的文件。例如：-mtime 0 表示查找今天修改过的文件，-mtime -7 表示查找一周以前修改过的文件。关于时间 n 参数的说明：+n：查找比 n 天前更早的文件或目录。-n：查找在 n 天内更改过属性的文件或目录。n：查找在 n 天前（指定那一天）更改过属性的文件或目录。\n\nGgrep\n: 表示当前目录所有文件，也可以是某个文件名-r 是递归查找-n 是显示行号-R 查找所有文件包含子目录-i 忽略大小写grep &quot;相关内容&quot; 文件名ps -ef | grep &quot;nginx&quot;ls | grep -E &quot;txt|log&quot; #多个条件grep -rn &quot;xxx&quot; ~/workspace # grep 的orgrep &#x27;pattern1\\|pattern2&#x27; filenamegrep -E &#x27;pattern1|pattern2&#x27; filenameegrep &#x27;pattern1|pattern2&#x27; filename# grep 的notgrep -v &#x27;pattern&#x27; filename# 查找对应的内容在哪个文件grep -rl &quot;gs=&#x27;git status&#x27;&quot; ~\n\nHhelp-d 输出每个命令的简短描述-m 以类似man手册的格式描述命令-s 只显示命令使用格式--help选项绝大多数命令都可以使用--help选项来查看帮助ls --help 输出的帮助信息基本上是man命令的信息简要版\nhexdump可用参数\n[-bcCdovx] [-e format_string] [-f format_file] [-n length] [-s skip] file ...\n参数含义\n-b\t单字节八进制显示，十六进制显示偏移量，每行显示16个字符，每字符用三位显示，不足补零，列间以空格分隔-c\t单字节字符显示，十六进制显示偏移量，每行显示16个字符，每字符三位显示，不足补空格，列间以空格分隔-C\t标准十六进制+ascii码显示，十六进制显示偏移量，每行16个字符，每字符两位显示，不足补0，结尾显示当前16位数据的ascii码值，以|框住-d\t双字节十进制显示，十六进制显示偏移量，每行8组（16字节）每组5位，不足补零，列间以空格分隔，以无符号10进制数值显示-e 指定格式字符串，格式字符串包含在一对单引号中，格式字符串形如：&#x27;a/b &quot;format1&quot; &quot;format2&quot;&#x27;-f 根据format file中的格式进行输出，忽略formatfile中空行及以#开始的行会-n length 只显示length个字节的数据-o\t双字节八进制显示。十六进制显示偏移量，每行8组数据，每数据占两字节，6列，不足补零，以空格分隔-s offset 跳过从开始的offset个字节，默认输入十进制，以0x或0X开始按16进制处理，否则如以0开始按八进制处理，如果以b/k/m结尾，则原数值乘以512/1024/1048576-v\t显示所有数据，如果不包含这一选项，对于同上一行完全相同的数据，hexdump会以*代替显示-x\t两位十六进制显示.十六进制显示偏移量，每行8组数据，每数据占两字节，4列，不足补零，以空格分隔\n每个格式字符串由三部分组成，每个由空格分隔，第一个形如a&#x2F;b，b表示对每b个输入字节应用format1格式，a表示对每a个输入字节应用format2格式，一般a&gt;b，且b只能为1，2，4，另外a可以省略，省略则a&#x3D;1。format1和format2中可以使用类似printf的格式字符串，如：\n%02d：两位十进制%03x：三位十六进制%02o：两位八进制%c：单个字符等\n还有一些特殊的用法：\n%_ad：标记下一个输出字节的序号，用十进制表示%_ax：标记下一个输出字节的序号，用十六进制表示%_ao：标记下一个输出字节的序号，用八进制表示%_p：对不能以常规字符显示的用.代替同一行如果要显示多个格式字符串，则可以跟多个-e选项\nIiconv用法： iconv [选项...] [文件...]\n转换给定文件的编码。\n 输入&#x2F;输出格式规范：  -f, –from-code&#x3D;名称     原始文本编码  -t, –to-code&#x3D;名称       输出编码\n 信息：  -l, –list                 列举所有已知的字符集\n 输出控制：  -c                         从输出中忽略无效的字符  -o, –output&#x3D;FILE          输出文件  -s, –silent               关闭警告      –verbose              打印进度信息\n  -?, –help                 给出该系统求助列表      –usage                给出简要的用法信息  -V, –version              打印程序版本号\n长选项的强制或可选参数对对应的短选项也是强制或可选的。\n[root@localhost ~]# iconv abc.sh -o utf8     #将文件转换成utf8格式[root@localhost ~]# iconv -l         #查看所有编码\n# 文件编码转换iconv test.txt -f GBK -t UTF-8 -o test2.txt \nJKLln在文件间产生连接。缺省时，产生硬连接，有-s选项，则产生符号（软）连接。使用方式 : ln [options] source dist，其中 option 的格式为 :\n[-bdfinsvF] [-S backup-suffix] [-V &#123;numbered,existing,simple&#125;][--help] [--version] [--]# 区分是软链接还是硬链接，查看节点编号是否一致，如果一致，说明是硬链接；否则是软链接。ll -i file1 file2\n\n说明: Linux&#x2F;Unix 档案系统中，有所谓的连结(link)，我们可以将其视为档案的别名，而连结又可分为两种:硬连结(hard link)与软连结(symbolic link)，硬连结的意思是一个档案可以有多个名称;软连结的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬连结是存在同一个档案系统中，而软连结却可以跨越不同的档案系统。ln source dist 是产生一个连结(dist)到 source，至于使用硬连结或软链结则由参数决定。不论是硬连结或软链结都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。\n-f : 链结时先将与 dist 同档名的档案删除-d : 允许系统管理者硬链结自己的目录-i : 在删除与 dist 同档名的档案时先进行询问-n : 在进行软连结时，将 dist 视为一般的档案-s : 进行软链结(symbolic link)-v : 在连结之前显示其档名-b : 将在链结时会被覆写或删除的档案进行备份-S SUFFIX : 将备份的档案都加上 SUFFIX 的字尾-V METHOD : 指定备份的方式–help : 显示辅助说明–version : 显示版本\n生产上避免大的io可以先通过硬链接的方式，把一个文件再创建一个名称，把原名称删除，然后在空闲时间删除链接文件。\n硬链接\nroot@hecs-410501:/data# touch aroot@hecs-410501:/data# vim aroot@hecs-410501:/data# ln a broot@hecs-410501:/data# cat b1root@hecs-410501:/data# vim broot@hecs-410501:/data# cat b12root@hecs-410501:/data# cat a12\n软链接\nroot@hecs-410501:/data# ln -s a croot@hecs-410501:/data# lltotal 16-rw-r--r-- 2 root root    4 Sep 16 22:45 a-rw-r--r-- 1 root root 3787 Sep 11 21:44 apt.md-rw-r--r-- 2 root root    4 Sep 16 22:45 blrwxrwxrwx 1 root root    1 Sep 16 22:45 c -&gt; a-rw-r--r-- 1 root root 2026 Sep 16 16:54 Linux.mdroot@hecs-410501:/data# vim croot@hecs-410501:/data# cat c123root@hecs-410501:/data# cat a123\n# 软链接依赖于原始文件，如果原始文件被删除，则链接文件不能用# 原始文件的路径是相对于链接文件的路径ln -s ../f1.txt dir1/f1.txt.link# 前面的路径是，是相对于后面的路径的# 删除的软链接如果是文件夹的话，不能在最后写/,否则就是删除的链接里面的文件。rm -rf dir1/f1.txt.link\nls-i 查看节点编号-a 查看所有文件-A 查看似乎所有文件，不包括.和..\nlsoflsof 命令可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能。参数说明：\n-? -h #显示出lsof的帮助信息    \n-a #参数被视为AND，会影响全部的参数   \n-c c #显示出以字符或字符串c开头的命令程序开启的文件，如$lsof -c init   \n+d s #在文件夹s下搜寻，此参数不会继续深入搜寻此文件夹。如显示在/usr/local下被程序开启的文件：$lsof +d /usr/local +D D 同上，但是会以该文件为基础往下全部搜寻，这样花费较大的CPU时　间，请谨慎使用   \n-d s　#此参数以file descriptor(FD)值显示结果，可以采用范围（1-3）或个别，如显示FD为4的进程：$lsof -d 4   \n-g [s] #以程序的PGID显示，也可以采用范围或个别表示，若没有特别指定，则显示全部，如显示PGID为6的进程：$lsof -g 6   \n-i #用以监听有关的任何符合的地址，若没有相关地址被指定，则监听全部   \n        用法： lsof -i [46][protocol][@hostname|hostaddr][:serivce|port]   \n        说明：　4 6　　IPv4 或 IPv6   \nprotocol TCP or UDP   \nhostname internet host name   \nhostaddr IPv4地址   \nservice /etc/service中的service name   \nport 端口号   \n-l #此参数禁止将user ID 转换为登录的名称，默认是登录名称   \n+|-L [l] # +或-表示开启或关闭显示文件连接数，如果只有单纯的+L，后面没有任何数字，则表示显示全部，如果后面有数字，只有文件连接数少于该数字的会被列出   \n-n #不将IP地址转换为hostname,预设是转换的   \n-N #显示NFS的文件   \n-p s #以PID作为显示的依据   \n-P #此参数禁止将port number转换为service name,预设为转换   \n+|-r [t] #控制lsof不断重复执行，t为15秒，也就是说每隔15秒再重复执行 +r 一直执行，直到没有文件被显示 -r 永远不断的执行，直到收到中断讯号(ctrl+ c)   \n-R #此参数增列出PID的子程序，也就是PPID   \n-s #列出文件的大小，若该文件没有大小，则留下空白   \n-u s #列出login name或UID为的程序   \n-v #显示lsof的版本信息\n\nMmanman命令是最常见的帮助命令，也是Linux最主要的帮助命令，基本信息如下：man [选项] [章节] 命令man命令交互快捷键上：向上移动一行下：向下移动一行PgUP：向上翻一页PgDn：向下翻一页g：移动到第一页G：移动到最后一页q：退出/字符串：从当前向下搜索字符串?字符串：从当前向上搜索字符串n：当搜索字符串时，可以用n键找到下一个匹配N：同n,向上匹配\nNnohup 命令nohup 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。\nnohup 命令，在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME&#x2F;nohup.out 文件中。\nnohup /root/runoob.sh &gt; runoob.log 2&gt;&amp;1 &amp;## 2&gt;&amp;1放在文件后面，不然启动的时候会报 nohup: redirecting stderr to stdout\n\n2&gt;&amp;1 解释：将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中。\n\n0 – stdin (standard input，标准输入)\n1 – stdout (standard output，标准输出)\n2 – stderr (standard error，标准错误输出)\n\nOPQRrename# 可以指修改文件# rename 原来的规则 现在的规则 文件rename conf conf.bak f*rename .bak &#x27;&#x27; f*\nrevrev 显示最后一个字符显示到第一个字符。参数：无\n[root@localhost www]# cat test1234abcd[root@localhost www]# rev test4321dcba[root@localhost www]# tac testabcd1234\nrm# 批量删除隐藏文件,不包括.和..rm -rf .[^.]*# 删除所有文件，包括隐藏文件rm -rf * .[^.]*# 对于删除不掉的文件如： -f &#x27;~&#x27;，可以用相对或绝对路径的方式rm ./-frm ./~\nrm虽然删除了文件，但是被删除的文件仍然可能被恢复，在安全要求较高的情况下，可以使用shred安全删除文件\nSscpscp 命令用于 Linux 之间复制文件和目录。scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。scp 是加密的，rcp 是不加密的，scp 是 rcp 的加强版\nscp [可选参数] file_source file_target # 1、从本地复制到远程scp /home/space/music/1.mp3 root@www.runoob.com:/home/root/others/music scp -r /home/space/music/ root@www.runoob.com:/home/root/others/ # 2、从远程复制到本地scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3  \n说明1.如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：\n#scp 命令使用端口号 4588scp -P 4588 remote@www.runoob.com:/usr/local/sin.sh /home/administrator\n2.使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。\nsftpsftp -P 22 admin@ip# 更改远程工作目录cd /abc# 更改或打印本地工作目录lcd /abc# 列出远程工作目录ls# 列出本地工作目录lls# 打印远程工作目录pwd# 打印本地工作目录lpwd# 浏览本地目录，即打开本地目录explore# 将文件从服务器下载到本地get [-r] /test/ ~/# 将文件从本地上传到服务器put [-r] ~/test/ /tmp#在远程创建一个目录mkdir# 移动或重命名远程文件mv/rename /test.txt /abc.txt# 删除远程服务器上的文件rm abc.txt# 删除远程服务器上的文件夹rmdir abc# 帮助help# 清屏clear#结束bye/exit/quit/!\nshredshred [OPTION]… FILE…常见选项：-z 最后一次覆盖添加0，以隐藏覆盖操作-v 能够显示操作进度-u 覆盖后截断并删除文件-n# 指定覆盖文件内容的次数（默认是3次）\nssss -tunlp\n\nsshssh tank@192.168.1.108 -p 2222  #指定端口登录\nsystemctlsystemctl命令列出所有服务systemctl是Systemd 的主命令，可用于管理系统列出所有已加载的systemd unitssystemctlsystemctl | grep docker.service列出所有servicesystemctl list-units –type&#x3D;servicesystemctl –type&#x3D;service列出所有active状态（运行或退出）的服务systemctl list-units –type&#x3D;service –state&#x3D;active列出所有正在运行的服务systemctl list-units –type&#x3D;service –state&#x3D;running列出所有正在运行或failed状态的服务systemctl list-units –type&#x3D;service –state running,failed列出所有启用的服务systemctl list-unit-files –state&#x3D;enabled\nTtail参数：\n\n-f 循环读取\n-q 不显示处理信息\n-v 显示详细的处理信息\n-c&lt;数目&gt; 显示的字节数\n-n&lt;行数&gt; 显示文件的尾部 n 行内容\n–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束\n-q, –quiet, –silent 从不输出给出文件名的首部\n-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒动态查看文件后30 行\n\ntail notes.log         # 默认显示最后 10 行tail -n 30 -f xxx\ntar# 压缩 a.c文件为test.tar.gztar -czvf test.tar.gz a.c  # 解压到指定文件夹tar -zxvf /xxx.tar.gz -C /data/\ntr用法：tr [选项]… SET1 [SET2]从标准输入中替换、缩减和&#x2F;或删除字符，并将结果写到标准输出。\n  -c, -C, –complement        首先补足SET1  -d, –delete            删除匹配SET1 的内容，并不作替换  -s, –squeeze-repeats    如果匹配于SET1 的字符在输入序列中存在连续的                重复，在替换时会被统一缩为一个字符的长度  -t, –truncate-set1        先将SET1 的长度截为和SET2 相等      –help        显示此帮助信息并退出      –version        显示版本信息并退出\nSET 是一组字符串，一般都可按照字面含义理解。解析序列如下：\n  \\NNN    八进制值为NNN 的字符(1 至3 个数位)  \\        反斜杠  \\a        终端鸣响  \\b        退格  \\f        换页  \\n        换行  \\r        回车  \\t        水平制表符  \\v        垂直制表符  字符1-字符2    从字符1 到字符2 的升序递增过程中经历的所有字符  [字符*]    在SET2 中适用，指定字符会被连续复制直到吻合设置1 的长度  [字符*次数]    对字符执行指定次数的复制，若次数以 0 开头则被视为八进制数  [:alnum:]    所有的字母和数字  [:alpha:]    所有的字母  [:blank:]    所有呈水平排列的空白字符  [:cntrl:]    所有的控制字符  [:digit:]    所有的数字  [:graph:]    所有的可打印字符，不包括空格  [:lower:]    所有的小写字母  [:print:]    所有的可打印字符，包括空格  [:punct:]    所有的标点字符  [:space:]    所有呈水平或垂直排列的空白字符  [:upper:]    所有的大写字母  [:xdigit:]    所有的十六进制数  [&#x3D;字符&#x3D;]    所有和指定字符相等的字符\n仅在SET1 和SET2 都给出，同时没有-d 选项的时候才会进行替换。仅在替换时才可能用到-t 选项。如果需要SET2 将被通过在末尾添加原来的末字符的方式补充到同SET1 等长。SET2 中多余的字符将被省略。只有[:lower:] 和[:upper:]以升序展开字符；在用于替换时的SET2 中以成对表示大小写转换。-s 作用于SET1，既不替换也不删除，否则在替换或展开后使用SET2 缩减。\necho &#123;1..10&#125;             1 2 3 4 5 6 7 8 9 10echo &#123;1..10&#125; | tr &#x27; &#x27; &#x27;+&#x27;1+2+3+4+5+6+7+8+9+10\n\ntree常见选项：-d 只显示目录-L level 指定显示的层级数目-P pattern 只显示由指定wild-card pattern 匹配到的路径\nUVWwhatiswhatis命令是用于查询一个命令执行什么功能，并将查询结果打印到终端上。 \nwhatis命令在用catman -w命令创建的数据库中查找command参数指定的命令、系统调用、库函数或特殊文件名。whatis命令显示手册部分的页眉行。然后可以发出man命令以获取附加的信息。whatis命令等同于使用man -f命令。\n[root@localhost fastdfs]# whatis lsls                   (1)  - list directory contentsls                   (1p)  - list directory contents\n\nXxargsfind / -type f -name &quot;*.txt&quot; | xargs grep &quot;apple&quot;\nYZ查看当前终端使用的哪种shellecho $0\t/bin/bashps -p $$    PID TTY          TIME CMD   2301 pts/0    00:00:02 bash\n\n查看linux版本cat /etc/os-releasecat /proc/version\n\n用户追加到组usermod -a -G group1,group2 username\n不停止服务，把文件内容置空cat /dev/null &gt; filename\n\nwindows ssh连接不上vm问题1.先把两端防火墙都关闭（NAT网络）2.两端都进行ping测试，再虚拟机内进行ping baudi.com测试3.查看VMNAT服务是否开启4.如果虚拟机可以ping通主机，也可以上网，修改vmnet8属性，自动改为手动，和虚拟机网段保持一致\n","categories":["linux"],"tags":["linux"]},{"title":"Linux证书","url":"/2023/09/25/Linux%E8%AF%81%E4%B9%A6/","content":"CER格式cer格式的证书里面只含有证书和公钥\n#查看证书是哪种格式file certname\n\n证书格式是pem#证书格式的转换以及提取公钥openssl x509 -in certname.cer -out certname.pemopenssl x509 -in certname.pem -out certname.crtopenssl x509 -pubkey -noout -in certname.crt/certname.pem &gt; certname.public.key#查看证书openssl x509 -in certname.pem -text -noout#查看证书md5openssl x509 -noout -nodulus -in certname.crt | oepnssl md5#查看私钥的md5openssl rsa -noout -nodulus -in certname.private.key | openssl md5\n证书格式是der# DER格式证书一般出现在Java平台中，您可使用OpenSSL工具将其转化为PEM格式。通过执行以下两条OpenSSL命令，DER格式证书转换为PEM格式。# 只提取公钥文件的命令：openssl x509 -inform der -in certificate.der -out certificate.pem# 说明：certificate.der为DER格式的证书，certificate.pem为转换后的PEM格式证书。具体文件以实际环境为准。# 只提取私钥文件的命令：openssl rsa -inform DER -outform PEM -in privatekey.der -out privatekey.pem# 说明：privatekey.der为DER格式的证书，privatekey.pem为转换后的PEM格式证书。具体文件以实际环境为准。\npkcs12格式PFX也称为PKCS#12(Public Key Cryptography Standards #12)&#xff0c;常见的扩展名是: .pfx 和 .p12 “KEY文件 &#43; CRT文件” &#61; PFX文件 也就是说&#xff0c;这个文件里既有公钥&#xff08;证书&#xff09;也有私钥 如果想查看“CERTIFICATE”或者是“PRIVATE KEY”&#xff0c;需要将公钥和私钥从此文件中分离 \n1、提取密钥对 \nopenssl pkcs12 -in outgoing.CertwithKey.pkcs12 -nocerts -nodes -out outgoing.key\n \n2、从密钥对中提取私钥 \nopenssl rsa -in outgoing.keypair -out outgoing_pri.key\n \n3、从密钥对中提取公钥 \nopenssl rsa -in outgoing.keypair -pubout -out outgoing_pub.key\n \n4、查看私钥 \nopenssl rsa -text -in outgoing_pri.key\n \n其中有个比较重要的返回值&#xff0c;与上面提到的client.key相同 \n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA12m8jif26EcPJKjDhs5VaqKunknnnnmD54u0C9yJU2AiD&#43;AH\nWd1uEuE5IrUhO2MMFQ5SIqRIag1R7YUdmD1.............\n-----END RSA PRIVATE KEY-----\n \n5、查看公钥 \n写到这里&#xff0c;不知道怎么回事&#xff0c;之前好使的指令现在突然不好使了。所以如果仅仅是想看公钥的码&#xff0c;可以直接查看pkcs12文件 \nopenssl pkcs12 -in outgoing.CertwithKey.pkcs12\n \n","categories":["linux"],"tags":["linux"]},{"title":"archLinux博客搭建","url":"/2022/12/19/archLinux%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"安装工具1.nodejs的安装2.npm的安装\nsudo pacman -S nodejs npm node -v #查看版本，如果出现版本就说明安装成功npm -v\n\n利用npm安装cnmpsudo npm install -g cnpm --registry=https://registry.npm.taobao.orgsudo cnpm install -g hexo-clihexo -v\n\n初始化博客#创建一个空文件夹mkdir blog#在搭建的过程中如果出现了错误，把blog删除，重新来cd blogsudo hexo init#出现start blogging with Hexo! 代表初始化仓库成功ls -l #查看生成的内容#生成静态文件sudo hexo g\n\n启动博客hexo s#出现https://localhost:4000 启动成功#浏览器访问https://localhost:4000可以进行查看\n\n部署到远端cnpm install --save hexo-deployer-gitvim _config.ymldeploy:  type: git  repo: 仓库地址用ssh  branch: main#生成公钥私钥,添加公钥到githubssh-keygen -t rsassh-agent -sssh-add ~/.ssh/id_rsassh -T git@github.com #测试连接hexo d \n\n\n博客中用到的命令#Create a new posthexo new name#Clean cachehexo clean#Gdnerate static fileshexo g#Run serverhexo s #Deploy to remote siteshexo d \n\n\n","categories":["blog"],"tags":["ArchLinux","blog"]},{"title":"Linux防火墙","url":"/2023/09/14/Linux%E9%98%B2%E7%81%AB%E5%A2%99/","content":"iptables管理和设置iptables规则iptables的基本语法格式iptables [-t 表名]命令选项 [链名] [条件匹配] [-j 目标动作或跳转]说明: 表名、链名用于指定 iptables命令所操作的表和链，命令选项用于指定管理iptables规则的方式(比如:插入、增加、删除、查看等;条件匹配用于指定对符合什么样 条件的数据包进行处理;目标动作或跳转用于指定数据包的处理方式(比如允许通过、拒绝、丢弃、跳转 (Jump) 给其它链处理iptables命今的管理控制选项\n-A 在指定链的末尾添加(append) 一条新的规则-D 删除(delete)指定链中的某一条规则，可以按规则序号和内容删除-I 在指定链中插入(insert)一条新的规则，默认在第一行添加-R 修改、替换(replace)指定链中的某一条规则，可以按规则序号和内容替换-L 列出(list)指定链中所有的规则进行查看-E 重命名用户定义的链，不改变链本身-F 清空(flush)-N 新建(new-chain)一条用户自己定义的规则链-X 删除指定表中用户自定义的规则链(delete-chain)-P 设置指定链的认策略(policy)-Z 将所有表的所有链的字节和数据包计数器清零-n 使用数字形式(numeric)显示输出结果-v 查看规则表详细信息(verbose) 的信息-V 查看版本(version)-h 获取帮助(help)\n防火墙处理数据包的四种方式ACCEPT 允许数据包通过DROP 直接丢弃数据包，不给任何回应信息REJECT 拒绝数据包通过，必要时会给数据发送端一个响应的信息LOG在&#x2F;var&#x2F;log&#x2F;messages文件中记录日志信息，然后将数据包传递给下一条规则iptables防火墙规则的保存与恢复iptables-save把规则保存到文件中，再由目录rc.d下的脚本 (&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables) 自动装载使用命令iptables-save来保存规则。一般用\niptables-save &gt; /etc/sysconfig/iptables\n生成保存规则的文件，&#x2F;etc&#x2F;sysconfig&#x2F;iptables,也可以用\nservice iptables save\n它能把规则自动保存在&#x2F;etc&#x2F;sysconfig&#x2F;iptables中。当计算机启动时，rc.d下的脚本将用命令iptables-restore调用这个文件，从而就自动恢复了规则。\n查看iptables -nvL –line-number\n-L 查看当前表的所有规则，默认查看的是filter表，如果要查看NAT表，可以加上-t NAT参数-n 不对ip地址进行反查，加上这个参数显示速度会快很多-v 输出详细信息，包含通过该规则的数据包数量，总字节数及相应的网络接口–-line-number 显示规则的序列号，这个参数在删除或修改规则时会用到\n添加添加规则有两个参数：-A和-I。其中-A是添加到规则的末尾；-I可以插入到指定位置，没有指定位置的话默认插入到规则的首部。当前规则：\n[root@test ~]# iptables -nL --line-numberChain INPUT (policy ACCEPT)num target   prot opt source        destination1  DROP    all -- 192.168.1.1     0.0.0.0/02  DROP    all -- 192.168.1.2     0.0.0.0/03  DROP    all -- 192.168.1.4     0.0.0.0/0\n添加一条规则到尾部：\n[root@test ~]# iptables -A INPUT -s 192.168.1.5 -j DROP\n再插入一条规则到第三行，将行数直接写到规则链的后面：\n[root@test ~]# iptables -I INPUT 3 -s 192.168.1.3 -j DROP\n查看：\n[root@test ~]# iptables -nL --line-numberChain INPUT (policy ACCEPT)num target   prot opt source        destination1  DROP    all -- 192.168.1.1     0.0.0.0/02  DROP    all -- 192.168.1.2     0.0.0.0/03  DROP    all -- 192.168.1.3     0.0.0.0/04  DROP    all -- 192.168.1.4     0.0.0.0/05  DROP    all -- 192.168.1.5     0.0.0.0/0\n\n删除删除用-D参数删除之前添加的规则（iptables -A INPUT -s 192.168.1.5 -j DROP）：\n[root@test ~]# iptables -D INPUT -s 192.168.1.5 -j DROP\n有时候要删除的规则太长，删除时要写一大串，既浪费时间又容易写错，这时我们可以先使用–line-number找出该条规则的行号，再通过行号删除规则\n[root@test ~]# iptables -nv --line-numberiptables v1.4.7: no command specifiedTry `iptables -h&#x27; or &#x27;iptables --help&#x27; for more information.[root@test ~]# iptables -nL --line-numberChain INPUT (policy ACCEPT)num target   prot opt source        destination1  DROP    all -- 192.168.1.1     0.0.0.0/02  DROP    all -- 192.168.1.2     0.0.0.0/03  DROP    all -- 192.168.1.3     0.0.0.0/0\n删除第二行规则\n[root@test ~]# iptables -D INPUT 2\n\n修改修改使用-R参数先看下当前规则：\n[root@test ~]# iptables -nL --line-numberChain INPUT (policy ACCEPT)num target   prot opt source        destination1  DROP    all -- 192.168.1.1     0.0.0.0/02  DROP    all -- 192.168.1.2     0.0.0.0/03  DROP    all -- 192.168.1.5     0.0.0.0/0\n将第三条规则改为ACCEPT：\n[root@test ~]# iptables -R INPUT 3 -j ACCEPT\n再查看下：\n[root@test ~]# iptables -nL --line-numberChain INPUT (policy ACCEPT)num target   prot opt source        destination1  DROP    all -- 192.168.1.1     0.0.0.0/02  DROP    all -- 192.168.1.2     0.0.0.0/03  ACCEPT   all -- 0.0.0.0/0      0.0.0.0/0\n永久生效service iptables saveservice iptables restart\n\nfirewalldfirewall防火墙服务简述与安装1、Centos7 默认的防火墙是 firewall，替代了以前的 iptables2、firewall 使用更加方便、功能也更加强大一些3、frewald 服务引入了一个信任级别的概来管理与之相关联的连接与接口。它支持 pv4 与 ipv6，并支持网桥，采用 frewal-cmd(command)或 firewall-config (gui) 来动态的管理 kernel netfilter 的临时或永久的接口规则，并实时生效而无需重启服务。4、查看 firewall 版本: firewall-cmd –version\nfirewall-cmd --version\nfirewall防火墙安装1）像使用iptables一样，firewall同样需要安装2）需要注意的是某些系统已经自带了firewall的，如果查看版本没有找到，可以进行安装3）安装firewalld\nfirewalld服务基本使用firewall与iptables一样都是服务，所以可以使用systemctl服务管理工具来操作firewalld-cmd 防护墙命令使用1、上面所说的 firewall 可以看成整个防火墙服务，而 firewall-cmd 可以看成是其中的一个功能，可用来管理端口(1)查看 firewall-cmd 状态，即查看 firewall 防火墙程序是否正在运行: firewall-cmd –state\n[root@localhost ~]# firewall-cmd --staterunning\n(2)查看已打开的所有端口，firewall-cmd –zone&#x3D;public –list-ports\n[root@localhost ~]# firewall-cmd --zone=public --list-ports6379/tcp 22122/tcp 23000/tcp 8080/tcp 8888/tcp 9502/tcp 6662/tcp 9999/tcp 7002/tcp 6661/tcp 6688/tcp 6667/tcp 6689/tcp 8000/tcp6663/tcp 9070/tcp 9089/tcp 9988/tcp 9222/tcp 4444/tcp\n(3)开启指定端口1.开启一个端口: firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent (-permanent 永久生效，没有此参数重启后失效)2.重新加载 firewall，修改配置后，必须重新加载才能生效: firewall-cmd –reload(4)关闭指定端口1.关 9876 端口: firewall-cmd –zone&#x3D;public -remove-port&#x3D;9898&#x2F;tcp –permanent (-permanent 表示永久生效，没有此参数重启失)2.重新加载 firewall，修改配置后，必须重新加载才能生效: firewall-cmd –reloadpublic.xml 文件修改防火墙端口firewal-cmd对端口的操作，如开放端口等信息，都放在在”etc&#x2F;firewall&#x2F;zones&#x2F;public.xm”中记录所以直接修改此文件也是可以的注意事项1、如下所示，CentOS 7.2 Linux系统防火墙明明开启了指定的端口，tomcat服务器端口也指定正确，启动没有任何问题，最后以windows浏览器访问的时候，却只有80端口有效，其余的端口全部访问失败2、最后原因居然是因为系统是阿里云服务器，而它的后台为了安全，封掉了其它端口的访问，所以即使防火墙修改了也没用，解决办法是登录阿里云服务器后台，修改它的安全组策略即可。这是生产上遇到的问题。\niptables与firewalld的区别firewalld 与 iptables的比较:1.frewalld可以动态修改单条规则，动态管理规则集，允许更新规则而不破坏现有会话和连接。而iptables，在修改了规则后必须得全部刷新才可以生效;2.firewalld使用区域和服务而不是链式规则:3.firewalld默认是拒绝的，需要设置以后才能放行。而iptables默认是允许的，需要拒绝的才去限制;4.frewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netflter来实现。也就是说，firewalld和iptables一样，它们的作用都用于维护规则，而真正使用规则干活的是内核的netfilter。只不过firewalld和iptables的结果以及使用方法不一样!trewald是iptables的一个封装，可以让你更容易地管理iptables规则。它并不是iptables的替代品，虽然ptales命今仍可用于iewald，建议firewalld时仅使用firewalld命令。使用方式区别:iptables要给http服务添加80端口允许规则，需要在&#x2F;etc&#x2F;sysconfig&#x2F;iptables中添加如下内容:A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT然后systemctl stop iptablessystemctl restart iptablessystemctl enable iptablesfirewalld实现同样的功能，可以用下面2种方式:1.直接添加服务firewall-cmd –permanent –zone&#x3D;public –add-service&#x3D;httpfirewall-cmd –reload2.添加端口firewall-cmd –permanent –zone&#x3D;public –add-port&#x3D;80&#x2F;tcpfirewall-cmd –reload\n","categories":["Linux"],"tags":["firewall"]},{"title":"archlinux安装蓝牙","url":"/2023/08/08/archlinux%E5%AE%89%E8%A3%85%E8%93%9D%E7%89%99/","content":"需要安装的包sudo pacman -S bulez bluez-utils pulseaudio-bluetooth bluedevil# bluedevil 可以换成 blueman \n\n开启服务sudo systemctl enable --now bluetooth\n\n相关命令$bluetoothctl        进入蓝牙管理工具环境[bluetooth]# power on 打开蓝牙[bluetooth]# agent on 开启代理[bluetooth]# scan on 扫描蓝牙设备[bluetooth]# pair xx:xx:xx:... 配对该设备[bluetooth]# trust xx:xx:xx:... 信任该设备[bluetooth]# connect xx:xx:... 连接该设备[bluetooth]# disconnect xx:xx:...断开蓝牙[bluetooth]# help 查看帮助信息[bluetooth]# show 查看本机蓝牙信息[bluetooth]# discoverable yes 设置蓝牙可被发现[bluetooth]# info xx:xx:xx:... 查看该蓝牙设备的信息\n\n","categories":["archlinux"],"tags":["bluetooth"]},{"title":"arch微信安装","url":"/2023/02/21/arch%E5%BE%AE%E4%BF%A1%E5%AE%89%E8%A3%85/","content":"微信paru -S deepin-wine5 com.qq.weixin.deepin sudo vim /opt/apps/com.qq.weixin.deepin/files/run.sh# 手动把     export APPRUN_CMD=&quot;deepin-wine6-stable&quot;#改成     export APPRUN_CMD=&quot;deepin-wine5&quot;#或 sed -i.bak &#x27;22s/deepin-wine6-stable/deepin-wine5/g&#x27; /opt/apps/com.qq.weixin.work.deepin/files/run.sh启动命令 /opt/apps/com.qq.weixin.deepin/files/run.sh\n\n企业微信的安装paru -S wineparu -S com.qq.weixin.work.deepin# 修改启动命令sed -i.bak &#x27;16s/deepin-wine6-stable/wine/g&#x27; /opt/apps/com.qq.weixin.work.deepin/files/run.sh\n\n微信中的字体显示方块点击下载字体\n下载完成后拷贝字体到~&#x2F;.deepinwine&#x2F;xxx&#x2F;drive_c&#x2F;windows&#x2F;Fonts\n","categories":["ArchLinux"],"tags":["arch wechat"]},{"title":"awesome","url":"/2023/11/02/awesome/","content":"下载sudo pacman -S nitrogen compton rofi feh xfce4-power-manager xf86-input-libinput libinput xf86-input-synaptics lxappearance nemo neofetch networkmanager network-manager-applet  xfce4-power-manager volumeicon xorg-xinit xorg-server xorg-xrandr xorg-xrdb xorg-xinput xf86-video-intel awesome xterm wqy-zenhei i3lock-color flameshot dunst alacritty pavucontrol acpi yay -S pa-applet-git nerd-fonts-jetbrains-mono ttf-material-design-icons ttf-joypixels wqy-microhei tela-icon-theme lightdm-webkit-theme-aether mint-themes\n配置文件cp /etc/xdg/awesome/rc.lua ~/.config/awesomevim ~/.config/awesome/rc.lua\n\n\n\nXorg启动# 若无~/.xinitrc文件,cp /etc/X11/xinit/xinitrc ~/.xinitrcvim ~/.xinitrc#twm &amp;#xclock -geometry 50x50-1+1 &amp;#xterm -geometry 80x50+494+51 &amp;#xterm -geometry 80x20+494-0 &amp;#exec xterm -geometry 80x66+0+0 -name login#export DWM=~/my_desktop/dwm#exec dwmexec awesome\n\n配置触摸板轻触点击sudo cp /usr/share/X11/xorg.conf.d/70-synaptics.conf /etc/X11/xorg.conf.d/\nSection &quot;InputClass&quot;        Identifier &quot;touchpad&quot;        Driver &quot;synaptics&quot;        MatchIsTouchpad &quot;on&quot;                Option &quot;TapButton1&quot; &quot;1&quot;                Option &quot;TapButton2&quot; &quot;3&quot;                Option &quot;TapButton3&quot; &quot;0&quot;                Option &quot;VertEdgeScroll&quot; &quot;on&quot;                Option &quot;VertTwoFingerScroll&quot; &quot;on&quot;                Option &quot;HorizEdgeScroll&quot; &quot;on&quot;                Option &quot;HorizTwoFingerScroll&quot; &quot;on&quot;                Option &quot;VertScrollDelta&quot; &quot;-112&quot;                Option &quot;HorizScrollDelta&quot; &quot;-114&quot;                Option &quot;MaxTapTime&quot; &quot;125&quot;EndSection\n\n配置去掉title--搜索titlebars_enabled，把这里的true改为false，不显示标题栏     -- Add titlebars to normal clients and dialogs           &#123; rule_any = &#123;type = &#123; &quot;normal&quot;, &quot;dialog&quot; &#125;      &#125;, properties = &#123; titlebars_enabled = false &#125;     &#125;,\n\n修改启动器为rofi--搜索Prompt把下面代码改为如下awful.key(&#123; modkey &#125;,            &quot;r&quot;,     function () awful.util.spawn(&quot;rofi -show drun&quot;) end,    &#123;description = &quot;run rofi&quot;, group = &quot;launcher&quot;&#125;),\n\n添加快捷键awful.key(&#123; modkey, &quot;Control&quot; &#125;, &quot;l&quot;,     function () awful.util.spawn_with_shell(&quot;~/.config/awesome/blurlock.sh&quot;)        end,              &#123;description = &quot;screen lock&quot;, group = &quot;awesome&quot;&#125;),     \n\n移动应用到另一个tag,屏幕跟随-- Move client to tag.        awful.key(&#123; modkey, &quot;Shift&quot; &#125;, &quot;#&quot; .. i + 9,                  function ()                      if client.focus then                          local tag = client.focus.screen.tags[i]                          if tag then                              client.focus:move_to_tag(tag)                              tag:view_only()                          end                     end                  end,                  &#123;description = &quot;move focused client to tag #&quot;..i, group = &quot;tag&quot;&#125;),\n\n\n\n添加边距--最后添加-- Gapsbeautiful.useless_gap = 5\n只执行一次的function run_once(cmd)  findme = cmd  firstspace = cmd:find(&quot; &quot;)  if firstspace then    findme = cmd:sub(0, firstspace-1)  end  awful.util.spawn_with_shell(&quot;pgrep -u $USER -x &quot; .. findme .. &quot; &gt; /dev/null || (&quot; .. cmd .. &quot;)&quot;)endrun_once(&quot;volumeicon&quot;)\n\n添加自启动程序--边距后添加--Autostart--awful.spawn.with_shell(&quot;xrandr --output Virtual-1 --mode 1920x1080&quot;)awful.spawn.with_shell(&quot;feh --bg-fill ~/Downloads/sakura_art_sky_122545_1920x1080.jpg&quot;)-- awful.spawn.with_shell(&quot;nitrogen --restore&quot;)awful.spawn.with_shell(&quot;dropbox&quot;)awful.spawn.with_shell(&quot;picom&quot;)awful.spawn.with_shell(&quot;fcitx5&quot;)awful.spawn.with_shell(&quot;nm-applet&quot;)awful.spawn.with_shell(&quot;pa-applet&quot;) --音量图标awful.spawn.with_shell(&quot;xfce4-power-manager&quot;)\n\n参考https://github.com/SuceV587/awesomewm-dothttps://github.com/ChrisTitusTech/titus-awesome\n","categories":["awesome"],"tags":["awesome"]},{"title":"docker","url":"/2023/05/19/docker/","content":"docker 介绍Docker最初是DotCloud公司在法国期间发起的一个公司内部项目，后来以Apache2.0授权协议开源，代码在Github_上维护。\nDocker是基于Google公司推出的Golang语言开发而来，基于Linpux内核的Cgroups、 NameSpace, 以及Union FS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。\n由于隔离的进程独立于宿主机和其他隔离的进程，也被称之为容器。\n最初的Docker是基于LXC的，后来去除L XC转而使用自行开发的L ibcontainer。Docker被定义为开源的容器引擎，可以方便的对容器进行管理。例如对镜像打包封装，引入Docker Registry对镜像统一管理。\n利用Docker可以实现开发，测试，生产环境的部署一致性， 极大的减少运维成本。\n容器和虚拟机的差异传统虚拟机技术虚拟机是虚拟出一套硬件，在其上面运行一个完整的操作系统，例如我们使用的KVM,指定镜像，然后安装系统，最终可以使用，在该系统上再运行所需的应用程序。KVM创建虚拟机时，指定较少的CPU,内存，硬盘等资源，虚拟机性能较低。\n容器技术容器内的应用程序直接运行在宿主机的内核 上，窗口内没有自己的内核 ，也没有对硬件进行虚拟，因此容器比起虚拟机更为轻便\n容器对比KVM的好处\n窗口能够提供宿主机的性能，而KVM虚拟机是分配宿主机硬件资源，性能较弱\n同样配置的宿主机，最多可以启动10个虚拟机的话，可以启动100+的容器数量\n启动一个KVM虚拟机，得有一个完整的开机流程，花费时间较长，而启动一个窗口只需要一条命令\nKVM需要硬件CPU的虚拟化支持，而窗口不需要\n\n为什么选择docker\ndocker更高效的利用系统资源\n更快的启动时间\n一致性的环境\n持续交付和部署\n更轻松的迁移\n利用docker的镜像，部署迁移项目，还可以跨系统平台\n\ndocker能做什么\n可以把应用程序代码及运行依赖环境打包成镜像，作为交付介质，在各环境部署\n可以将镜像(image)启动成容器(container)，并且提供多容器的生命周期进行管理(启，停，删)\ncontainer容器之间相互隔离，且每个窗口可以设置资源限额\n提供轻量级虚拟化功能，容器就是宿主机中一个个的虚拟的空间，彼此相互隔离，完全独立\n\ndocker安装部署docker最核心的组件\nimage镜像，构建容器(我们将应用程序运行所需的环境，打包为镜像文件)\nContainer,容器(你的应用程序，就跑在容器中)\n镜像仓库(dockerhub)(保存镜像文件，提供上传，下载镜像)作用好比github\nDockerfile,将你部署项目的操作，写成一个部署脚本，这就是dockerfile,且该脚本还能够构建镜像文件\n\nDocker引擎\nDocker Daemon安装使用Docker,得先运行Docker Daemon进程，用于管理docker,如：\n\n镜像 images\n容器 containers\n网络 network\n数据卷 Data Volumes\n\nRest接口提供和Daemon交互的API接口\nDocker Client客户端使用REST API和Docker Daemon进行访问\nDocker平台组成\nImages镜像是一个只读模板，用于创建窗口，也可以通过Dockerfile文本描述镜像的内容镜像的概念类似于编程开发里面向对象的类，从一个基类开始(基础镜像Base Image)构建窗口的过程，就是运行镜像，生成容器的实例Docker镜像的描述文件是Dockerfile,包含了如下的指令\n\nFROM 定义了基础镜像\nMAINTAINER 作者\nRUN 运行Linux命令\nADD 添加文件&#x2F;目录\nENV 环境变量\nCMD 运行进程\n\nContainer容器是一个镜像的运行实例，镜像&gt;容器创建容器的过程\n\n获取镜像，如 docker pull contos,从镜像仓库拉取\n使用镜像创建容器\n分配文件系统，挂载一个读写层，在读写层加载镜像\n分配网络&#x2F;网桥接口，创建一个网络接口，让容器和宿主机通信\n容器获取IP地址\n执行容器命令，如&#x2F;bin&#x2F;bash\n反馈容器启动结果\n\nRegistryDocker镜像需要进行管理，docker提供了Registry仓库，其实它也是一个容器。可以基于该容器运行私有仓库。也可以使用Docker Hub互联网公有镜像仓库\nDocker的安装Docker引擎主要有两个版本：企业版(EE)和社区版(CE)\n安装环境初始化\n机器环境初始化\n# 1.防火墙# 2.yumidr# 3.安装基础软件wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repoyum clean allyum makecacheiptgables -F #清空系统规则getenforce #确保selinux也是处于禁用状态yum install -y bash-completion vim lrzsz wget expect net-tools nc nmap tree dos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc ntpdate openldap-devel\n\n安装docker#docker必须安装在centos7平台，内核版本不低于3.10#在centos平台运行docker可能会遇见些警告信息，修改内核配置参数，打开内核转发功能uname -r\n\n开启Linux内核的流量转发\ncat &lt;&lt;EOF &gt; /etc/sysctl.d/docker.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.conf.default.rp_filter = 0net.ipv4.conf.all.rp_filter = 0net.ipv4.ip_forward = 1EOFmodprobe br_netfilter# 加载修改内核的参数配置文件sysctl -p /etc/sysctl.d/docker.conf\n\n利用yum快速安装docker\n# 提前配置好yum仓库# 1.阿里云自带仓库 2.阿里云提供的docker专属repo仓库curl -o /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repocurl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 更新yum缓存yum clean all &amp;&amp; yum makecache # 可以直接yum安装docker了yum install docker-ce-20.10.6 -y# 查看源中可用版本yum list docker-ce --showduplicates | sort -r# 如果需要安装旧版本yum install -y docker-ce-18.09.9# 如果要卸载yum remove -y docker-xxx\n\n镜像加速器使用docker首要操作就是获取镜像文件，默认下载是从Docker Hub下载，网速较慢，国内很多云服务商都提供了加速器服务，阿里云加速器，Daocloud加速器，灵雀云加速器\n# 1.修改docker配置文件，我们选用七牛云镜像站cat /etc/docker/daemon.json# 也可以配置加速源https://cr.console.aliyun.com/cn-hangzhou/instances/mirrorsmkdir -p /etc/dockervi /etc/docker/daemon.json&#123;  &quot;registry-mirrors&quot; : [    &quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;  ]&#125;# 2.重启，设置开机自启systemctl daemon-reloadsystemctl enable dockersystemctl restart dockerps -ef | grep dockerdocker psdocker images == docker image ls docker version # 看到Client和Server说明docker正确安装和启动成功了\n\n启动第一个docker容器# 先搜索镜像文件是否存在docker search nginx# 1.获取镜像，获取是从之前配置好的docker镜像站中，去拉取镜像docker pull nginx[:tag]# 2.运行镜像，生成容器,运行nginx镜像，运行出，具体的容器，容器中就跑着一个nginx服务了docker run 参数 镜像的名字/id# -d 后台运行容器# -p 80:80 端口映射 宿主机端口:容器端口  访问宿主机的这个端口，也就访问了容器内的端口netstat -tunlpdocker run -d -p 80:80 nginx # 会返回一个容器的id# 查看容器是否在运行docker ps# 此时可以访问宿主机的80端口，就访问到了容器内的80端口# 停止容器，查看结果docker ps docker stop 容器id# 开始运行docker start 容器id# 查看本地的docker镜像有哪些docker images# 删除镜像docker rmi 镜像id\n\ndocker的生命周期学习docker的核心要素，就是要搞明白镜像image,容器!\ndocker build . # 构建dockerfile生成镜像docker save 导出镜像docker load 导入镜像# 公司同事之间传递镜像文件，把镜像导出为一个压缩文件docker run 镜像 # 生成一个容器docker stop 容器id/名字docker start 容器id/名字docker restart 容器id/名字#当你在容器中，定制安装了些软件，想要提交该容器生成一个镜像docker commit 容器id# 1.获取了一个centos镜像，连vim都没有# 2.docker run centos,可以进入容器# 3.在容器中安装了一个vim# 4.docker commit 容器id# 5.提交后生成的镜像就是携带vim的镜像了\n\ndocker镜像的原理我们在获取redis镜像的时候，发现是下载了多行信息，最终获取了一个完整的镜像文件\ndocker pull redis# 会下载很多层docker images\n使用vmware虚拟机安装的系统，是一个完整的系统，包括2部分\n\nLinux内核，作用是提供操作系统的基本功能，和机器硬件交互\ncentos7发行版，作用是提供软件功能，例如yum安装包等\n\n因此，Linux内核+centos发行版，就组成了一个系统是否有一个办法，可以灵活的替换发行版，让我们使用不同的系统\ndocker就实现了这个功能，技术手段就是docker images\n# 查看发行版cat /etc/os-release# 查看内核版本uname -r# 利用docker获取不同的发行版镜像docker pull centos:7.8.2003docker pull ubuntu# 运行容器且进入容器内# -i 交互式操作 -t 开启一个终端 bash 进入容器后执行的命令docker run -it centos bashcat /etc/redhat-releaseexitdocker run -it ubuntu shcat /etc/lsb-releaseexitdocker search susedocker search opensusedocker pull opensusedocker imagesdocker run -it opensuse bashcat /etc/SuSE-releasehostname # 返回的是容器idexit\n小节\n\n一个完整的系统，是由Linux内核+发行版，才组成了一个可以使用的完整系统\n利用docker容器，可以获取不同的发行版镜像，然后基于该镜像，运行出各种发行版去使用\n\ndocker的好处\n\n解决了环境的兼容问题，在容器中运行Linux发行版，以及各种软件，[windows+docker+容器1(centos)+容器2(ubuntu)]\n环境很干净，安装的所有内容，都在容器里，不想要了，直接删除容器，不影响宿主机\n比如想把mysql容器内的数据，配置，全部迁移到服务器上，只需要提交该容器，生成镜像，镜像放到服务器上，docker run 就可以了。\n\n\nUnion File Systemdocker通过联合文件系统，将上述的不同的每一层，整合为一个文件系统，为用户隐藏了多层的视角。当通过一个image启动容器时，docker会在该image最顶层，添加一个读写文件系统作为容器，然后运行该容器docker镜像本质是基于UnionFS管理的分层文件系统dockerfile的作用：自定义docker镜像的每一层作用\n\ndocker镜像定义我们如果自定义镜像，docker镜像不包含Linux内核，和宿主机共用。我们想要定义一个mysql5.6镜像，我们会这么做\n\n获取基础镜像，选择一个发行版平台(ubuntu,centos)\n在centos镜像中安装mysql5.6软件\n\n导出镜像，可以命名为mysql:5.6镜像文件。从这个过程，我们可以感觉出这是一层一层添加的，docker镜像的层级概念就出来了，底层是centos镜像，上层是mysql镜像，centos镜像层属于父镜像。\nDocker镜像是在基础镜像之后，安装软件，配置软件，添加新的层，构建出来。dockerfile构建时，更加清晰。\n# 查看正在运行的容器docker ps# 进入到正在运行的容器内docker exec -it 容器id bash\n\ndocker镜像为什么分层镜像分层的一大好处就是共享资源，例如有多个镜像都来自于同一个base镜像，那么在docker host只需要存储一份bash镜像。\n内存里也只需要加载一份host,即可为多个容器服务。\n即使多个容器共享一个base镜像，某个容器修改了base镜像的内容，如修改&#x2F;etc&#x2F;下配置文件，其他容器的&#x2F;etc&#x2F;下的内容是不会被修改的，修改动作只限制在单个容器内，这就是容器的写入时复制特性(Copy-on-write)\n可写的容器层当容器启动后，一个新的可写层被加载到镜像的顶部，这一层通常被称为容器层，容器层下的都称为镜像层\n对所有容器的修改操作，都只会发生在容器层里，只有容器层是可写的，其余镜像层都是只读的。\n\n添加文件  容器中创建文件时，新文件被添加到容器层中。\n读取文件  在容器中读取某个文件时，Docker会从上往下依次在各镜像中查找此文件。一旦找到，立即将其复制到容器层，然后打开并读入内存\n修改文件  在容器中修改已存在的文件时，Docker会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后改之。\n删除文件  在容器中删除文件时，Docker会从上往下依次在各镜像层中查找此文件。找到后，会在容器层中记录下此删除操作(只是记录删除操作)\n\n只有当需要修改时才复制一份数据，这种特性被称作Copy-on-Write.可见，容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。\n容器层记录对镜像的修改，所有镜像层都是只读的，不会被容器修改，所以镜像可以被多个容器共享\nDocker镜像的内容docker镜像层级管理的方式大大便捷了Docker镜像的分发和在存储。Docker hub是为全世界的镜像仓库。\n\nDocker镜像代表一个容器的文件系统内容\n镜像层级技术属于联合文件系统\n容器是一个动态的环境，每一层镜像里的文件都属于静态内容\ndockerfile里的ENV,VOLUME,CMD等内容都会落实到容器环境里\n\n\n\ndocker镜像的实际使用学习1.下载安装docker工具2.获取该软件的docker镜像，下载nginx镜像，docker pull nginx3.运行该镜像，启动了容器，这个nginx就运行在容器中4.停止容器，删除镜像，就好像没有安装过nginx一样就好比沙箱一样的环境基于镜像的增删改查\n获取镜像# 1.获取镜像，镜像托管仓库，就好比yum源一样# 默认的docker仓库是，dockerhub,有大量的优质镜像，以及用户上传的镜像，centos容器安装vim nginx ...提交镜像，上传到dockerhubdocker search 镜像名:tag tag就是具体的标签版本docker version docker psdocker images == docker image lsdocker search centosdocker pull centosdocker images# 下载镜像文件docker pull centos # 默认是centos:latestdocker pull centos:7.8.2003# 查看docker数据的存放目录docker info [ | grep Root]ls /var/lib/dockerdocker imagesls /var/lib/docker/image/overlay2/imagedb/content/sha256# 这里面的id是和docker images查看出来的id是一样的# 查看id，内容是json格式的数据# 作用是记录 镜像 和容器的配置关系# 使用不同的镜像生成容器# -it 开启一个交互式的终端，--rm 容器退出时删除该容器docker run -it --rm centos bashexitdocker imagesdocker run -it --rm centos:7.8.2003 bash\n\n查看镜像docker images ## 查看具体的镜像docker images centosdocker images ubuntu# 可以指定具体的tagdocker images centos:7.8.2003# 只列出镜像的id# -q --quiet 只列出iddocker images -q # 格式化显示镜像 这里docker 的模板语言 --formatdocker images --format &quot;&#123;&#123;.ID&#125;&#125;--&#123;&#123;.Repository&#125;&#125;&quot;# 以表格形式显示，美化docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot;# 搜索dockerhub的镜像docker search 镜像名\n\n删除镜像# 镜像加速curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.iodocker version &gt;=1.12&#123;&quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;]&#125;Success.You need to restart docker to take effect: sudo systemctl restart dockersudo systemctl restart docker# 下载docker pull hello-worlddocker imagesdocker run hello-world# 根据镜像的id,名字，摘要等 docker images hello-world# 被删除的镜像不得有依赖容器的记录docker rmi hello-worlddocker ps -a # 删除容器记录docker rm 容器id# 指定id的前三位即可docker rmi d11\n\n镜像管理docker images# 列出所有的镜像docker images -a# 列出所有的镜像id docker images -aqecho `docker images -aq`# 指删除镜像，慎用docker rmi `docker images -aq`docker rm `docker ps -aq`# 导出镜像docker run -it centos bash# 比如默认运行的centos镜像，不提供vim功能，运行该容器后，在容器内安装vimyum install -y vim # 然后提交该镜像，再导出该镜像为压缩文件，可以发给其他人用exitdocker ps -a# 导出镜像的命令docker imagesdocker image save centos:7.8.2003 &gt; /opt/centos7.8.2003.tgz# 导入镜像的命令docker image load -i /opt/centos7.8.2003# 查看镜像详细信息docker info #看的是docker 进程的信息docker image inspect 镜像id\n\ndock容器docker run 等于创建+启动docker run 镜像名，如果镜像不存在本地，则会在线去下载该镜像\n注意：容器内的进程必须处于前台运行状态，否则容器就会退出，自己部署一个容器运行，命令不得后台运行，前台运行即可如果容器内，什么事也没做，容器也会挂掉，容器内必须有一个进程在前台运行我们运行nginx基础镜像，没有运行任何程序，因此容器直接挂掉\nnohub ping baidu.com &amp;jobs # 查看后台运行的程序fg 1 # 把后台运行的程序提到前台# 运行容器的玩法# 1.运行一个挂掉的容器docker run centos:7.8.2003# 这个写法，会产生多条独立的容器记录，且容器内没有程序在跑，因此挂了# 2.运行容器，且进入容器内，且在容器内执行某个命令docker run -it centos:7.8.2003 sh# 3.开启一个容器，让它帮你运行某个程序，属于前台运行，会卡住一个终端docker run centos:7.8.2003 ping baidu.com# 4.运行一个活着的容器，docker ps可以看到的容器# -d参数，让容器在后台跑着（针对宿主机而言）docker run -d centos:7.8.2003 ping baidu.comdocker ps #可以看到# 5.丰富docker运行的参数# -d 后台运行# --rm 容器挂掉后自动被删除# --name 给容器起个名字docker run -d --rm centos:7.8.2003 ping baidu.comdocker psdocker run -d --rm --name baidu centos:7.8.2003 ping baidu.comdocker psdocker stop 容器iddocker ps -a 也看不到，因为被删除了# 6.查看容器的日志# -f 动态跟踪docker logs -f  容器id# 7.进入正在运行的容器空间内docker exec -it 容器id bash # 8.查看容器的详细信息docker container inspect 容器id # 返回的是json数据串# 9.容器的端口映射docker run -it nginx netstat -tunlp | grep 80 # 此时是不能访问到容器内的nginx的#后台运行nginx容器，起个名字，且端口映射宿主机的85端口，访问到容器内的80端口docker run -d --name my_nginx -p 85:80 nginxdocker ps# 随机端口映射 -P 随机访问一个宿主机的空闲端口，映射到容器内打开的端口docker run -d --name my_nginx_random -P nginx # 10.容器的提交# 运行基础的centos:7.8.2003 ，在容器内安装vim，然后提交新的镜像# 新的镜像，再运行出的容器，默认就带有vim了docker run -it centos:7.8.2003 bash# 提交容器docker commit 容器记录的id 自定义的镜像名docker images # 就可以查看到# 再运行新的镜像，就带有vim\n\nDockerFile镜像定制定制docker镜像的方式有两种\n\n手动修改容器内容，导出新的镜像\n基于Dockerfile自行编写指令，基于指令流程创建镜像\n\nDockerfile简介镜像是多层存储，每一层在前一层的基础上进行修改容器也是多层存储，以镜像为基础层，在其基础上加一层作为容器运行时的存储层。\n\n手动修改容器内容，然后docker commit 提交容器为新的镜像\n通过在dockerfile中定义一系列的命令和参数构成的脚本，然后这些命令应用于基础镜像层，依次添加层，最终生成一个新的镜像。极大简化了部署工作\n\n官方提供的dockerfile实例https://github.com/CentOS/CentOS-Dockerfiles\ndockerfile的主要组成部分：\n基础镜像信息 FROM centos:6.8制作镜像操作指令RUN yum install openssh-server -y容器启动时执行指令 CMD [&quot;/bin/bash&quot;]\n\ndockerfile 指令FROM 指定基础镜像MAINTAINER 指定维护者信息，可以没有RUN 你想让它做什么（在命令前面加上RUN即可）ADD 添加宿主机的文件到容器内，还多了一个自动解压的功能# RUN tar -zxf /opt/xxx.tgz # 报错！该tgz文件不存在！COPY 添加宿主机的文件到容器内，仅仅拷贝WORKDIR 设置当前工作目录VOLUME 设置卷，挂载主机目录EXPOSE 指定对外的端口CMD 指定容器启动后要做的事\ndocker其他指令：\nCOPY 复制文件ENV 环境变量ENTRYPOINT 容器启动后执行的命令\n\n# 1.创建Dockerfile，注意文件名必须是这个vim DockerfileFROM nginxRUN echo &#x27;nginx首页&#x27; &gt; /usr/share/nginx/html/index.html# 2.构建dockerfile,在Dockerfile文件相同的文件夹docker build .# 3.修改镜像名docker tag 镜像id 名字# 4.运行该镜像netstat -tunlpdocker imagesdocker psdocker run -d -p 80:80 my-nginx# 5.查看宿主机的80端口ip:80\n\nCOPY# copy指令从宿主机复制文件到/目录到新的一层镜像内copy xxx.py /home/# 支持多个文件，以及通配符形式复制，语法要满足Golang的filepath.Matchcopy xxx* /tmp/cc?.txt /home/# COPY指令能够保留源文件的元数据，如权限，访问时间等\n\nADD特性和COPY一致，不过多了些功能1.源文件是一个URL,此时docker引擎会下载该链接，放入目标路径，且权限自动设为600,若这不是期望的结果，还要增加一层RUN指令进行调整2.源文件是一个URL,且是一个压缩包，不会自动解压，需要单独用RUN命令解压3.源文件是一个压缩文件，且是gzip,bzip2,xz,tar情况，ADD指令会自动解压缩该文件到目标路径\nDockerfile官方更推荐用COPY,ADD包含了更多复杂的功能，且ADD会使构建缓存失效，导致镜像构建缓慢\nCMD用法，注意是双引号CMD [&quot;参数1&quot;,&quot;参数2&quot;]在指定了entrypoint指令后，用CMD指定具体参数docker不是虚拟机，容器就是一个进程，既然是进程，那么程序在启动的时候需要指定些运行参数，这就是CMD指令的作用# 该镜像在运行容器实例的时候，执行的具体参数是什么例如centos镜像默认的CMD是/bin/bash，直接docker run -it centos 会直接进入bash解释器。也可以启动容器的时候，指定参数。docker run -it centos cat /etc/os-releaseaCMD运行shell命令，也会被转化为shell形式例如CMD echo $PATH会被转化为CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;echo $PATH&quot;]\n\n容器内运行程序这里要注意的是，docker不是虚拟机的概念，虚拟机里的程序运行，基本上都是在后台运行，利用systemctl运行，但是容器内没有后台进程的概念，必须在前台运行容器就是为了主进程而存在的，主进程如果退出了，容器也就失去了意义，自动退出例如有一个经典的问题\nCMD systemctl start nginx这样的写法是错误的，容器会产即退出因为systemctl start nginx 是希望以守护进程形式启动nginx,且CMD命令也会转化为CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;systemctl start nginx&quot;]这样的命令主进程是sh解释器，执行完毕后产即结束了，因此容器也就退出了正确的做法应该是CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]\n\nENTRYPOINT和RUN指令一样，分为两种格式\n\nexec\nshell\n\n作用和CMD一样，都是在指定容器启动程序以及参数当指定了ENTRYPOINT之后，CMD指令的语义就有了变化，而是把CMD的内容当作参数传递给ENTRYPOINT指令\n# 实际用法# 1.准备好dockerfillvim DockerfileFROM centos:7.8.2003RUN rpm --rebuilddb &amp;&amp; yum install epel-release -yRUN rpm --rebuilddb &amp;&amp; yum install curl -yCMD [&quot;curl&quot;,&quot;-s&quot;,&quot;http://ipinfo.io/ip&quot;]# 2.构建镜像docker build .# 3.查看结果Successfully build 镜像id# 4.检查镜像docker tag 镜像id centos_curldocker images # 5.运行镜像，生成容器 生成的只是容器记录docker run centos_curl# 6.上述运行正确，但是想再传入一个参数，发现是无法传入参数的,该形式是覆盖镜像中cmddocker run centos_curl -I# 报错docker run centos_curl pwd/# 7.想要正确的给容器传入一个-I参数,希望容器内能正确完整的执行下面命令curl -s http://ipinfo.io/io -I# 8.解决办法给容器传入新的，完整的命令docker run centos_curl curl -s http://ipinfo.io/io -I可以正确运行，但是没有意义# 9.正确的做法应该是使用ENTRYPOINT修改Dockerfile,如下vim DockerfileFROM centos:7.8.2003RUN rpm --rebuilddb &amp;&amp; yum install epel-release -yRUN rpm --rebuilddb &amp;&amp; yum install curl -yENTRYPOINT [&quot;curl&quot;,&quot;-s&quot;,&quot;http://ipinfo.io/ip&quot;]# 10.重新构建Dockerfiledocker build .# 11.重新运行镜像，看结果，以及传入新的参数# 此时发现，传入的CMD指令，当做了ENTRYPOINT的参数，容器内执行的完整命令是curl -s http://ipinfo.io/ip -Idocker run centos_crul_new -I\n\nARG和ENV指令设置环境变量\nDockerfile脚本，shell脚本ENV NAME=&quot;name&quot;ENV AGE=&quot;19&quot;ENV MYSQL_VERSION=5.6后续所有操作，通过$NAME 就可以直接获取变量了，维护Dockerfile脚本时更友好，方便ARG和ENV一样 设置环境变量 区别在于ENV无论是在镜像构建时，还是在容器运行时，该变量都可以使用ARG只是用于构建镜像需要设置的变量，容器运行时就消失了\n\nVOLUE容器在运行时，应该保证在存储层不写入任何数据，运行在容器内产生的数据，我们推荐是挂载，写入到宿主机上，进行维护\nVOLUME /data # 将容器内的/data文件夹，在容器运行时该目录自动挂载为匿名卷，任何向该目录中写入数据的操作，都不会被容器记录，保证容器存储层的无状态理念# DockerfileFROM centosMAINTAINER fengVOLUME [&quot;/data1&quot;,&quot;/data2&quot;]# 该容器运行时，这两个目录自动和宿主机的目录做好映射关系docker build .# 运行该镜像docker run 镜像id# 查看生成的容器信息docker ps -a | head -2# docker inspect 命令查看docker inspect 容器id\n1.容器数据挂载的方式，通过dockerfile,指定VOLUME目录2.通过docker run -v 参数，直接设置需要映射挂载的目录\nEXPOSE指定容器运行时对外提供的端口服务\n\n帮助使用该镜像的人，快速理解该容器的一个端口业务\n\ndocker port 容器docker run -p 宿主机端口:容器端口docker run -P # 作用是随机宿主机端口:容器端口\n\nWORKDIR用于在Dockerfile中，目录的切换，更改工作目录\nWORKDIR /opt\n\nUSER用于改变环境，用于切换用户\nUSER rootUSER feng\n\n","categories":["docker"],"tags":["docker"]},{"title":"git命令","url":"/2023/02/10/git%E5%91%BD%E4%BB%A4/","content":"Git工作区、暂存区、版本库、远程仓库四个工作区域Git本地有四个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)、git仓库(Remote Directory)。文件在这四个区域之间的转换关系如下：\nWorkspace： 工作区，就是你平时存放项目代码的地方Index/Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息Repository： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换\n\ngit忽略文件git update-index --assume-unchanged [file-path]# 恢复文件git update-index --no-assume-unchanged [file-path]git ls-files -v | grep &#x27;^h\\ &#x27;\n仓库# 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init [project-name]# 下载一个项目和它的整个代码历史git clone [url]\n\n配置# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;# 删除配置git config [--global] --unset xxx\n\n增加&#x2F;删除文件# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]\n代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...\n分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# git clone 之后本地只显示master分支 $ git checkout -t origin/dev# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]\n标签# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]\n查看信息# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog\n远程同步# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all\n撤销# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop\n其他# 生成一个可供发布的压缩包$ git archive\n\ngit bash 显示中文git config --global core.quotepath false\ngit——.gitignore添加忽略文件不生效原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交，这样就不会出现忽略的文件了。git清除本地缓存命令如下：git rm .env.development --cached在这里插入图片描述git commit -m &quot;Stopped tracking .env.development&quot;在这里插入图片描述现在，你应该可以随意修改.env.development文件，而不会受到git的跟踪了，这样每次提交都不会提交.env.development的修改到git上了\n\n\n解决Git中fatal: refusing to merge unrelated histories# 这是因为两个分支没有取得关系# 在你操作命令后面加--allow-unrelated-histories# 例如：git merge master --allow-unrelated-histories# 同理：git pull origin master --allow-unrelated-histories\ngit命令修改远程仓库# HTTPS 协议git remote set-url origin https://gitee.com/uncleyong/javaAutoTest.gitSSH 协议git remote set-url origin git@gitee.com:uncleyong/javaAutoTest.git\n\n解决每次git pull、git push都需要输入账号和密码的问题git config --global credential.helper store当前仓库不加 --global这次还要输入，下次就不用了\n\n提交部分代码#git只提交部分修改的文件（提交指定文件）git status -s 查看仓库状态git add src/components/文件名 添加需要提交的文件名(加路径–参考git status-打印出来的文件路径)gi stash -uk 忽略其他文件，把现修改的隐藏起来，这样提交的时候就不会提交未被add的文件git commit -m “哪里做了修改可写人……”git pull 拉取合并git push 推送到远程仓库git stash pop 恢复之前忽略的文件(非常重要的一步)\n\ngit stash# 查看储藏记录列表git stash liststash@&#123;index&#125;: WIP on [分支名]: [最近一次的commitID] [最近一次的提交信息]# 隐藏时指定保存信息git stash save [stashMessage]# 隐藏部分文件git stash push &lt;file1&gt; &lt;file2&gt;\n\n取出储藏前文提到的可以通过git stash pop用于取出最近一次储藏的修改到工作区，而通过查看储藏列表的index的可以取出指定储藏中的修改到工作区\n# 取出指定index的储藏的修改到工作区中git stash apply stash@&#123;index&#125; # 将指定index的储藏从储藏记录列表中删除git stash drop stash@&#123;index&#125;\n\ngit stash 部分文件git stash push &lt;file1&gt; &lt;file2&gt; -m &quot;保存信息&quot;\n","categories":["git"],"tags":["git"]},{"title":"Hello World","url":"/2022/12/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["blog"],"tags":["blog"]},{"title":"java","url":"/2023/02/09/java/","content":"“潜移默化，人方受教；斥其无知，不如称其易忘。”\nLog4J的输出级别按降序排序如下：OFF            最高等级，关闭日志\nFATAL          可能导致应用中止的严重事件错误 \nERROR          严重错误，主要是程序错误 \nWARN           一般警告 \nINFO           一般显示信息 \nDEBUG          调试信息 \nTRACE          比DEBUG更细粒度的事件信息 \nALL            最低等级\n\nSimpleDateFormat 格式日期出错 时间不对得问题将日期格式是 2019-09-09类型得字符串格式成20190909时如果直接用SimpleDateFormat(“yyyyMMdd”)进行格式 会出现日期错误得情况应该先将字符串转换成SimpleDateFormat(“yyyy-MM-dd”)类型得日期再进行格式化\n之前遇到的日期问题。public String changeTime(String time)&#123;\tif(time == null )&#123;return null&#125;\tString format1=null,format2=null;\tif(time.length()==8)&#123;\t\tformat1=&quot;yyyyMMdd&quot;;\t\tformat2=&quot;yyyy-MM-dd&quot;;\t&#125;else if(time.length()==14)&#123;\t\tformat1=&quot;yyyyMMddHHmmss&quot;;\t\tformat2=&quot;yyyy-MM-dd HH:mm:ss&quot;;\t&#125;else&#123;\t\tformat1=&quot;yyyy-MM-dd HH:mm:ss&quot;;\t\tformat2=&quot;yyyy-MM-dd HH:mm:ss&quot;;\t&#125;\treturn DateTimeUtils.DatetoString_format(DateTimeUtils.DatetoString_Format(time,format1),format2);&#125;\n取当前月的最后一天Calender calender = Calender.getInstance();calender.setTime(new Date());calender.add(Calender.MONTH,1);//当前日期的后一个月calender.set(Calender.DAY_OF_MONTH,1);//获取后一个月的第一天calender.add(Calender.DAY_OF_MONTH,-1);//后一个月的前一天Date date = calender.getTime();\n\nMapped Statements collection dose not contain value for ‘xxx’可能是xml里面，参数写的不对\n\nSpring boot增加上下文路径server:   port: 8080  servlet:     context-path: name\n配置文件如果 properties和 yml 文件都存在，不存在 spring.profiles.active 设置，如果有重叠属性，默认以 properties 优先。如果设置了 spring.profiles.active，并且有重叠属性，以 active 设置优先。\nthemeleaf通过ajax发送(对象)请求到后台html\n&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Spring Boot Thymeleaf Example&lt;/title&gt;    &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;    &lt;script th:src=&quot;@&#123;/js/jquery.js&#125;&quot;&gt;&lt;/script&gt; &lt;!-- 本地js --&gt;    &lt;script th:inline=&quot;javascript&quot;&gt;        /*&lt;![CDATA[*/        function sendMessage() &#123;            var message = $(&#x27;#messageInput&#x27;).val();            $.ajax(&#123;                url: &#x27;/sendMessage&#x27;,                type: &#x27;POST&#x27;,                dataType: &#x27;json&#x27;,                contentType: &#x27;application/json&#x27;,                data: JSON.stringify(&#123;message: message&#125;),                success: function(response) &#123;                    alert(&#x27;消息已发送&#x27;);                &#125;,                error: function(jqXHR,textStatus,errorThrown) &#123;                    if(jqXHR.status == 200)&#123;                        console.log(&quot;请求成功，返回数据有误&quot;);                    &#125;else&#123;                        console.log(&quot;请求失败，状态码：&quot;+jqXHR.status);                    &#125;                &#125;            &#125;);        &#125;        /*]]&gt;*/    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;欢迎来到Spring Boot Thymeleaf示例页面！&lt;/h1&gt;    &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeholder=&quot;输入消息&quot;&gt;    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送消息&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;\n\n后台ctrler\nimport org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class MessageController &#123;    @PostMapping(&quot;/sendMessage&quot;)    public String sendMessage(@RequestBody Message message) &#123;        // 在这里处理接收到的消息，例如保存到数据库或发送给其他用户        System.out.println(&quot;收到消息： &quot; + message.getMessage());        return &quot;消息已接收&quot;;    &#125;&#125;\n\nvo类\npublic class Message &#123;    private String message;    public Message() &#123;    &#125;    public Message(String message) &#123;        this.message = message;    &#125;    public String getMessage() &#123;        return message;    &#125;    public void setMessage(String message) &#123;        this.message = message;    &#125;&#125;\n\nthemeleaf通过ajax发送(非对象)请求到后台html\n&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Spring Boot Thymeleaf Example&lt;/title&gt;    &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;    &lt;script th:src=&quot;@&#123;/js/jquery.js&#125;&quot;&gt;&lt;/script&gt; &lt;!-- 本地js在 --&gt;    &lt;script th:inline=&quot;javascript&quot;&gt;        /*&lt;![CDATA[*/        function sendMessage() &#123;            var message = $(&#x27;#messageInput&#x27;).val();            $.ajax(&#123;                url: &#x27;/sendMessage&#x27;,                type: &#x27;POST&#x27;,                dataType: &#x27;json&#x27;,                data: &#123;&quot;message&quot;: message&#125;,                success: function(response) &#123;                    alert(&#x27;消息已发送&#x27;);                &#125;,                error: function(error) &#123;                    alert(&#x27;发送失败&#x27;);                &#125;            &#125;);        &#125;        /*]]&gt;*/    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;欢迎来到Spring Boot Thymeleaf示例页面！&lt;/h1&gt;    &lt;input type=&quot;text&quot; id=&quot;messageInput&quot; placeholder=&quot;输入消息&quot;&gt;    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送消息&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;\n\n后台Ctrler\nimport org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class MessageController &#123;    @PostMapping(&quot;/sendMessage&quot;)    public String sendMessage(String message) &#123;        // 在这里处理接收到的消息，例如保存到数据库或发送给其他用户        System.out.println(&quot;收到消息： &quot; + message.getMessage());        return &quot;消息已接收&quot;;    &#125;&#125;\n\n\n\njava对象的copyorg.springframework.beans.BeanUtils.copyProperties(源对象,目标对象);//1、org.apache.commons.beanutils.BeanUtils和org.springframework.beans.BeanUtils两个包中的copyProperties方法目标对象和源对象参数的位置是相反，使用时需要注意。//2、使用org.apache.commons.beanutils.BeanUtils进行copy对象时，被copy的对象（source/orig）中包含的字段目标对象（target/dest）必须包含，可以有其他的多于字段，类型可以不相同，但字段名称必须一致；org.springframework.beans.BeanUtils中的没有这个限制。\n在实体类里面调用serviceTestServiceImpl test = appContext.getBean(TestServiceImpl.class);\n下载不能用ajax，直接使用window.location&#x3D;””;BigDecimalBigDecimal data = new BigDecimal(&quot;10&quot;);必须要用string类型赋值，而不能用float和double.加法 add()函数 减法 subtract()函数乘法 multiply()函数 除法 divide() 函数 绝对值abs()函数大小的比较a.compareTo(b) == 1   a&gt;ba.compareTo(b) == 0   a=ba.compareTo(b) == -1  a&lt;b\n\nidea ssm 项目导出成war包1.先选项目结构，点击artifacts,再点+，选择Web Application: Archive–&gt; Empty2.修改项目名，类型，输出文件夹，点击xxx.war，create,点击右边的文件，put into Output Root，apply3.点击Build，选择Build Artifacts，Build。如果导出的war包大小不正确，先Rebuild Project ，再Clean Artifacts, 再重新打包\njava -jar 参数配置nohup java -jar -Xms1024m -Xmx1024m -Xss256k -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m xxx.jar --spring.profiles.active=xxx &gt; /dev/null 2&gt;&amp;1 &amp;\n\n注解为@RequestPart时postman调用方法 headerContent-type multipart/form-databodyparamName xxx.json() --这个是文件\nsql查询有记录，但都是null这里附给对应的vo也为null\njar包生成依赖mvn install:install-file -DgroupId=xxx -DartifactId=xxx -Dversion=xxx -Dfile=绝对路径 -DgeneratePom=true -Dpackaging=jar\n\n\ndatagrip 连接mysql报错vm options 后面写 -Duser.timezone&#x3D;Asia&#x2F;shanghai或 根据报错在Advanced 中找到serverTimezone 后面添加UTC\n修改sel快捷键打开设置 \nEditor--&gt;LiveTemplates --&gt;SQL\n\nmysql设置密码不过期# 本地alter user &#x27;root&#x27;@&#x27;localhost&#x27; password expire never;# 远程alter user &#x27;root&#x27;@&#x27;%&#x27; password expire never;\n","categories":["java"],"tags":["java"]},{"title":"js","url":"/2023/02/09/js/","content":"iframeWhen I first tried this method, I got a lame error about an IFRAME element’s contentWindow property being null.  Ugh.  It didn’t take long to figure out why:  you need to wait until the IFRAME has loaded to get the contentWindow:\nvar iframe = document.createElement(&#x27;iframe&#x27;);iframe.onload = function() &#123;\t// contentWindow is set!\t&#125;;iframe.src = &#x27;about:blank&#x27;;document.body.appendChild(iframe);\nOf course you’ll want to add the onload event before setting the src.  If you use the load event to check for the contentWindow property, you’ll be in business!\nenter事件把下面的方法添加到页面加载的函数中\nfunction addEnterEvent()&#123;\t$(&quot;#id&quot;).keydown(function (envnt)&#123;\t\tif(event.keyCode ==13)&#123;\t\t\tsearch();\t\t&#125;\t&#125;)&#125;\n向后台传递日期，后台获取不到问题jsp页面如果用日期控件获取到日期后台接收为Date类型前台把日期转成字符串格式，再向后台传\nvar date = new Date();var year = date.getFullYear();var month = date.getMonth()+1;var day = date.getDate();var date1 = year+&quot;-&quot;+month+&quot;-&quot;+day;把date1传递给后台，后台就可以接收到\n多选框默认选中$(&quot;#id&quot;).setValue(true);\n移除属性document.getElementById(&quot;id&quot;).removeAttribute(&quot;属性&quot;);$(&quot;#id&quot;).removeAttr(&quot;属性&quot;);\n弹出确认框$.prompt();\n向数组中添加元素var array = [];array.push(1);array.push(1);array = [1,1];\n添加相同的元素，不会被覆盖\n","categories":["java"],"tags":["js"]},{"title":"manjaro Linux","url":"/2023/07/23/manjaroLinux/","content":"换源su -ipacman -S vim #设置中科大源  vim /etc/pacman.d/mirrorlist  Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch pacman -Syy# 添加archlinuxcn源  vim /etc/pacman.conf #文件末尾添加两行：  [archlinuxcn]  Server = https://mirrors.ustc.edu.cn/archlinuxcn/$archpacman -Sypacman -S archlinuxcn-keyringpacman -S base-devel\n安装输入法# 更新系统sudo pacman -Syu# 安装语言包sudo pacman -S fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-chinese-addons sudo vim /etc/environment    GTK_IM_MODULE=fcitx  QT_IM_MODULE=fcitx  XMODIFIERS=@im=fcitx  SDL_IM_MODULE=fcitx  GLFW_IM_MODULE=ibus# 注销后重新登录就可以使用了\n\nvlc闪退问题修改 工具–&gt; 偏好设置–&gt; 视频–&gt; 输出改为x11视频输出(XCB)\n安装软件yay -S stacer # 瑞士军刀icalingua++ # qq替代品yesplaymusic # 第三方网易云音乐freedownloadmanager # 下载器pacman -S qbittorrent # qb软件下载\n\n","categories":["ArchLinux"],"tags":["manjaro"]},{"title":"mybatis","url":"/2023/02/09/mybatis/","content":"转义&lt;![CDATA[ 字段 &lt;&gt; 0 ]]&gt;\nsql数量和list数量不一致在sql语句里面添加查询主键。如：sys_guid()\n数据库类型为NUMBER在mybatis里面jdbcType可以写成NUMERIC\n单个参数出现 There is no getter for property named ‘name’ in ‘class java.lang.String’的问题There is no getter for property named &#x27;*&#x27; in &#x27;class java.lang.String，此错误之所以出现，是因为mybatis在对parameterType=&quot;String&quot;的sql语句做了限制，假如你使用&lt;when test=&quot;username != null&quot;&gt;这样的条件判断时，就会出现该错误，解决办法需要把 &lt;when test=&quot;username != null&quot;&gt;修改为 &lt;when test=&quot;_parameter  != null&quot;&gt;就好了\n\n数据比较&lt;if test=&quot;a != null and a == 0.toString()&quot;&gt;&lt;/if&gt;&lt;foreach collection=&quot;ids.split(&#x27;,&#x27;)&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot; item=&quot;item&quot;&gt;\t&lt;if test=&quot;item==0&quot; &gt; sql &lt;/if&gt;&lt;/foreach&gt;&lt;!-- 如果collection里面的是数组，要先在外面用if判断null --&gt;\n","categories":["java"],"tags":["mybatis"]},{"title":"oracle","url":"/2023/02/09/oracle/","content":"链接字符串\noracle两张表关联更新 update TA a set(name, remark)&#x3D;(select b.name, b.remark from TB b where b.id&#x3D;a.id)   where exists(select 1 from TB b where b.id&#x3D;a.id)注意如果不添加后面的exists语句，TA关联不到的行name, remark栏位将被更新为NULL值， 如果name, remark栏位不允许为null，则报错。 这不是我们希望看到的。当两张表的关系不是一对一时，用下面的方法\nmerge into  a using (select max(b.zj) zj,b.id from  b group by b.id) table2on (a.id=b.id)when matched thenupdate set a.zj=table2.zj\n\noracle 中，怎么在字符串中指定的位置插入一个字符可以用SUBSTR函数，来解决SUBSTR（‘AAAAA’，1，2）||‘ BBB‘||SUBSTR（’AAAAA‘，3）\noracle修改表字段长度alter table 表名 modify 列名 数据类型；alter table bl_yhsz modify  zcmc varchar2(120);\nOracle 字符串的截取substr(String,start,[length])\nlong类型的转换为String类型。CREATE OR REPLACE fUNCTION LONG_TO_CHAR(in_rowid      rowid, --rowid                                        in_owner      varchar, --所有者   可空                                        in_table_name varchar, --表名                                        in_column     varchar2 --要查询的列名                                        ) RETURN varchar AS  text_c1 varchar2(32767);  sql_cur varchar2(2000);begin  if length(in_owner) &gt; 0 then    sql_cur := &#x27;select &#x27; || in_column || &#x27; from &#x27; || in_owner || &#x27;.&#x27; ||               in_table_name || &#x27; where rowid = &#x27; || chr(39) || in_rowid ||               chr(39);  else    sql_cur := &#x27;select &#x27; || in_column || &#x27; from &#x27; || in_table_name ||               &#x27; where rowid =&#x27; || chr(39) || in_rowid || chr(39);  end if;  dbms_output.put_line(sql_cur);  execute immediate sql_cur    into text_c1;  text_c1 := substr(text_c1, 1, 4000);  RETURN TEXT_C1;END;\n\nselect t1.Table_Name || chr(13) || t3.comments as 表名称及说明,\t--t3.comments as 表说明,\tt1.Column_Name as 字段名称,\tt1.DATA_TYPE || &#x27;(&#x27; || t1.DATA_LENGTH || &#x27;)&#x27; as 数据类型,\tt1.NullAble as 是否为空,\tt2.Comments as 字段说明,\tt1.Data_Default as 默认值,\t--t4.created as 建表时间from cols t1left join user_col_comments t2\ton t1.Table_name = t2.Table_name\tand t1.Column_Name = t2.Column_Nameleft join user_tab_comments t3\ton t1.Table_name = t3.Table_nameleft join user_objects t4\ton t1.table_name = t4.OBJECT_NAMEwhere not exists (select t4.Object_Name\tfrom User_objects t4\twhere t4.Object_type = &#x27;TABLE&#x27;\tand t4.Temporary = &#x27;Y&#x27;\tand t4.Object_Name = t1.Table_Name)and t4.OBJECT_NAME IN (&#x27;表名大写&#x27;)order by t1.Table_Name,T1.colunm_id;\t\n\noracle  关于表中有clob字段的数据备份create table xxx as (select * from 原表名 where 条件);这样就可以备份clob字段了。\noracle 排序时把null放开头 order by xxx desc null first把null放末尾 order by xxx desc nulls last\n\n查询指定用户下的表和视图select table_name from all_tables where owner = &#x27;用户&#x27;;select view_name from dba_views where owner = &#x27;用户&#x27;;\ngroup by之后删除重复的数据先把group by 之后的数据，加上max(rowid)插入到一张临时新表中\ncreate table temp as (select max(rowid) maxrowid,xxx from a group by xxx) \n删除原表rowid不是最大rowid的数据，记得关联关系\ndelete from a where a.rowid not in (select maxrowid from temp) and a.xxx in (select xxx from temp)\n\n违反完整约束条件 未找到父项关键字把要插入表的外键关联给去掉，数据就可以导入进去了\noracle视图添加注释create or replace view org_user_view asselect t.username,t.password from org_users;comment on column org_user_view.usernameis &#x27;用户名;comment on column org_user_view.password is &#x27;密码&#x27;; \nnvlNVL函数是一个空值转换函数  NVL（表达式1，表达式2）  如果表达式1为空值，NVL返回值为表达式2的值，否则返回表达式1的值。该函数的目的是把一个空值（null）转换成一个实际的值。其表达式的值可以是数字型、字符型和日期型。但是表达式1和表达式2的数据类型必须为同一个类型。  对数字型： NVL（ comm,0);  对字符型 NVL( TO_CHAR(comm), &#x27;No Commission&#x27;)  对日期型 NVL（hiredate,&#x27; 31-DEC-99&#x27;)\nnvl2NVL2(表达式1，表达式2，表达式3）  如果表达式1为空，返回值为表达式3的值。如果表达式1不为空，返回值为表达式2的值。\n修改用户名1、用sysdba账号登入数据库，然后查询到要更改的用户信息：SELECT user#,name FROM user$;2、更改用户名并提交：UPDATE USER$ SET NAME=‘新的用户名’ WHERE user#=71;  COMMIT;3、强制刷新：ALTER SYSTEM CHECKPOINT;  ALTER SYSTEM FLUSH SHARED_POOL;4、更新用户的密码：ALTER USER 新用户名 IDENTIFIED BY &#x27;密码&#x27;;\n是否有效不确定之前用sqlplus &#x2F; as sysdba登录后，执行第二个，提示权限不足。\nORA-00257归档程序错误。只有在解析完成之后才以 AS SYSDBA 方式连接\n可能是归档日志满了，需要清理归档日志或磁盘windows下登录oracle服务器\n# win+r cmd 进入命令窗口rman target /crosscheck archivelog all;delete expired archivelog all;list archivelog all;delete archivelog until logseq 线程序列号;crosscheck archivelog all;exit\n# 如果上面的命令进不去RMAN模式,直接sqlplus / as sysdba;show parameter log_archive_dest;# 进入归档日志目录，手动删除归档文件，再重启数据库\nsqlplus / as sysdba;shutdown immediate;shartup;# 启动完成后，可以用以下命令验证conn 用户名;# 输入密码看是否可以登录，能登录，说明好了\n\nORA-30926: 无法在源表中获得一组稳定的行merge into a using (select b.id,b.name from b group by b.id,b.name) t on (a.name=b.name)when matched then update set a.id=b.id;# using后面的表里面group by 之后有重复数据\n","categories":["java"],"tags":["oracle"]},{"title":"pacman简单用法","url":"/2023/08/01/pacman%E7%94%A8%E6%B3%95/","content":"更新系统# 在 Archlinux 中,使用一条命令即可对整个系统进行更新:pacman -Syu# 如果你已经使用 pacman -Sy 将本地的包数据库与远程的仓库进行了同步,也可以只执行:pacman -Su\n\n安装包# pacman -S 包名:例如,执行 pacman -S firefox 将安装 Firefox。你也可以同时安装多个包, 只需以空格分隔包名即可。# pacman -Sy 包名:与上面命令不同的是,该命令将在同步包数据库后再执行安装。# pacman -Sv 包名:在显示一些操作信息后执行安装。# pacman -U:安装本地包,其扩展名为 pkg.tar.zst。\n\n删除包# pacman -R 包名:该命令将只删除包,不包含该包的依赖。# pacman -Rs 包名:在删除包的同时,也将删除其依赖。# pacman -Rd 包名:在删除包时不检查依赖。\n\n搜索包# pacman -Ss 关键字:这将搜索含关键字的包。# pacman -Qi 包名:查看有关包的信息。# pacman -Ql 包名:列出该包的文件。# pacman -F 命令: 查看命令在哪个包中\n\n其他用法# pacman -Sw 包名:只下载包,不安装。# pacman -Sc:Pacman 下载的包文件位于 /var/cache/pacman/pkg/ 目录。该命令将清理未安装的包文件。# pacman -Scc:清理所有的缓存文件。\n\n简单实例安装软件包# 安装或者升级单个软件包，或者一列软件包（包含依赖包），使用如下命令：pacman -S package_name1 package_name2# 有时候在不同的软件仓库中，一个软件包有多个版本（比如extra和testing）。你可以选择一个来安装：pacman -S extra/package_namepacman -S testing/package_name\n删除软件包# 删除单个软件包，保留其全部已经安装的依赖关系pacman -R package_name# 删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系：pacman -Rs package_name# 缺省的，pacman会备份被删除程序的配置文件，将它们加上*.pacsave扩展名。如果你在删除软件包时要同时删除相应的配置文件（这种行为在基于Debian的系统中称为清除purging），你可是使用命令：pacman -Rn package_name# 当然，它也可以加上-s参数来删除当前无用的依赖。这样的话，真正删除一个软件包、它的配置文件以及所有不再需要的依赖的命令如下：pacman -Rsn package_name\n软件相关# Pacman能够只用一个指令来升级系统中所有已安装的包。升级的时间取决于你的系统有多新。pacman -Su# 当然，最好做法的是将升级系统和同步仓库数据合成为一条指令：pacman -Syu\n\n查询包数据库# Pacman可以在包数据库中查询软件包，查询位置包含了包的名字和描述：pacman -Ss package# 要查询已安装的软件包：pacman -Qs package# 一旦你得到了软件包的完整名字，你可以获取关于它的更为详尽的信息：pacman -Si packagepacman -Qi package# 要获取已安装软件包所包含文件的列表：pacman -Ql package# 文件系统中某个文件是属于哪个软件包。pacman -Qo /path/to/a/file# 要罗列所有不再作为依赖的软件包(孤立orphans)：pacman -Qdt# Pacman使用-Q参数来查询本地软件包数据库。参见：pacman -Q –help#…而使用-S参数来查询远程同步的数据库。参见：pacman -S –help# 详情可参见pacman man。\n\n其它用法#Pacman是个非常广泛的包管理工具，这里只是它的一些其它主要特性。#下载包而不安装它：pacman -Sw package_name# 安装一个’本地’包（不从源里）：pacman -U /path/to/package/package_name-version.pkg.tar.zst# 安装一个’远程’包（不从源里）：pacman -U http://url/package_name-version.pkg.tar.zst# 清理当前未被安装软件包的缓存(/var/cache/pacman/pkg):pacman -Sc# 完全清理包缓存：pacman -Scc# Warning: 关于pacman -Scc，仅在你确定不需要做任何软件包降级工作时才这样做。pacman -Scc会从缓存中删除所有软件包。# 要删除孤立软件包（递归的，要小心)：pacman -Rs $(pacman -Qtdq)# 重新安装你系统中所有的软件包（仓库中已有的）：pacman -S $(pacman -Qq | grep -v &quot;$(pacman -Qmq)&quot;)# 获取本地软件包和它们大小的一个已排序清单列表：LANG=C pacman -Qi | sed -n ‘/^Name[^:]*: (.*)/&#123;s//1 /;x&#125;;/^Installed[^:]*: (.*)/&#123;s//1/;H;x;s/n//;p&#125;’ | sort -nk2# 要了解更详细的参数开关可以pacman –help或者man pacman。\n\n配置Pacman的配置文件位于&#x2F;etc&#x2F;pacman.conf。关于配置文件的进一步信息可以用man pacman.conf查看。\n常用选项常用选项都在[options]段。阅读man手册或者查看缺省的pacman.conf可以获得有关信息和用途。跳过升级软件包如果由于某种原因，你不希望升级某个软件包，可以加入内容如下：IgnorePkg = 软件包名跳过升级软件包组和软件包一样，你也可以象这样跳过升级某个软件包组：IgnoreGroup = gnome\n","categories":["archlinux"],"tags":["archLinux"]},{"title":"redis","url":"/2023/10/12/redis/","content":"redis修改密码报错(error) NOAUTH Authentication required解决方案1、进入安装redis目录，使用cmd进入如下页面\n2、在页面中输入rdeis-cli\n3、输入config set requirepass root（密码）或者输入在报错 (error) NOAUTH Authentication required时输入  auth  “root(密码)”  \n4、输入 config get requirepass查看redis的密码\n","categories":["redis"],"tags":["redis"]},{"title":"sway配置","url":"/2023/08/19/sway%E9%85%8D%E7%BD%AE/","content":"安装sudo pacman -S sway adobe-source-code-pro-fonts waybar ttf-font-awesome \\        swaybg swayidle grim slurp swappy wl-clipboard \\        alacritty rofi swaylock-effects-git\n\n配置sudo vim /etc/enviromentMOZ_ENABLE_WAYLAND=1vim .config/sway/configoutput * resolution --custom 1920x1080font pango: SourceCodePro Medium 12bar &#123;\tswaybar_command waybar&#125;\n\n配置文件git clone https://gitee.com/ucg7086/swayconfig.git# 看config.md 进行配置\n\n不用输入用户名密码sudo mkdir /etc/systemd/system/getty@tty1.service.dsudo vim /etc/systemd/system/getty@tty1.service.d/override.conf :[Service]ExecStart=ExecStart=-/usr/bin/agetty --autologin &lt;你的用户名&gt; --noclear %I $TERMType=idle\n","categories":["archlinux"],"tags":["archlinux"]},{"title":"tomcat","url":"/2023/02/09/tomcat/","content":"报400java.lang.IllegalArgumentException: 在请求目标中找到无效字符。有效字符在RFC 7230和RFC 3986中定义\n【Tomcat】已解决：java.lang.IllegalArgumentException: 在请求目标中找到无效字符。有效字符在RFC 7230和RFC 3986中定义\n[http-nio-8080-exec-7] org.apache.coyote.http11.Http11Processor.service 解析 HTTP 请求 header 错误 注意：HTTP请求解析错误的进一步发生将记录在DEBUG级别。    java.lang.IllegalArgumentException: 在请求目标中找到无效字符。有效字符在RFC 7230和RFC 3986中定义        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:509)        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:511)        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1650)        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)        at java.lang.Thread.run(Thread.java:748)\n方案一、Tomcat官网给出的方案：http://tomcat.apache.org/tomcat-8.0-doc/config/systemprops.html\ntomcat.util.http.parser.HttpParser. requestTargetAllow    This system property is deprecated. Use the relaxedPathChars and relaxedQueryChars attributes of the Connector instead. These attributes permit a wider range of characters to be configured as valid.A string comprised of characters the server should allow even when they are not encoded. These characters would normally result in a 400 status.The acceptable characters for this property are: |, &#123; , and &#125;WARNING: Use of this option may expose the server to CVE-2016-6816.If not specified, the default value of null will be used.\n\n方案二、修改server.xml 配置tomcat –&gt; conf–&gt; server.xml \n&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;           connectionTimeout=&quot;20000&quot;           redirectPort=&quot;8443&quot;           URIEncoding=&quot;utf-8&quot; relaxedPathChars=&quot;|&#123;&#125;[],%&quot;           relaxedQueryChars=&quot;|&#123;&#125;[],%&quot;           /&gt;\n\ntomcat 启动参数 Xms, Xmxlinux 在 tomcat/bin/catalina.sh 的 第一行#!/bin/sh 下添加JAVA_OPTS = &quot;-server -Xms1024m -Xmx2048 -XX:MaxNewSize=512m -XX:PermSize=128m -XX:MaxPermSize=256m -Djava.awt.headless=true&quot;windows 是.bat下面JAVA_OPTS = -Xms1024m -Xmx2048\n一台机器上启动多个tomcat1.配置环境变量2.修改server.xml端口3.修改startup.bat、catalina.bat中CATALINA_HOME环境变量位置值\ntomcat 配置httpsserver.xml\n&lt;!--sudo openssl pcs12 -export -in cert.crt -inkey server key -out cert.p12 -name alias输入两次密码将.p12格式文件转换成jks文件进入jdklbin\\keyt ool.exekeytool -importkeystore -srckeystore cert.p12 -srcstoretype PKCS12 -deststoretype JKS -destkeystore cert.jks输入密码，最好两次密码保持一致server.xml添加--&gt;&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;connectionTimeout=&quot;20000&quot;redirectPort=&quot;443&quot; relaxedPathchars=&quot;|&#123;&#125;[],%&quot; relaxedQueryChars=&quot;|&#123;&#125;[],%&quot; address=&quot;0.0.0.0&quot;/&gt;&lt;Connector port=&quot;443&quot; protocol=&quot;org.apache.coyote.http11.Http114prProtocol&quot;maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;&gt;    &lt;SSLHostConfig&gt;        &lt;Certificate certificateKeystoreFile=&quot;conf/cert.p12&quot;            certificatekeyAlias=&quot;第一条命令-name后的alias&quot;            centificatekeystorePassword=&quot;上面两次的密码&quot;            type=&quot;RSA&quot;/&gt;    &lt;/SSLHostConfig&gt;&lt;/Connector&gt;\n\nweb.xml下面代码放在最后\n&lt;login-config&gt;    &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt;    &lt;realm-name&gt;Client Cert Users-only Area&lt;/realm-name&gt;&lt;/login-config&gt; &lt;security-constraint&gt;    &lt;web-resource-collection&gt;        &lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt;         &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/web-resource-collection&gt;     &lt;user-data-constraint&gt;        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;    &lt;/user-data-constraint&gt;&lt;/security-constraint&gt;\n\ntomcat 配置域名解析server.xml\n&lt;Engine name-&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;    &lt;Host name=&quot;yourdomain&quot; appBase=&quot;webapps&quot;        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;        &lt;Alias&gt;yourdomain&lt;/Alias&gt;&lt;!--第一行--&gt;        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;        &lt;Context docBase= &quot;yourproject&quot; path=&quot;&quot; reloadable=&quot;true&quot;/&gt; &lt;!--最后一行--&gt;    &lt;/Hosts&gt;&lt;/Engine&gt;\n\n隐藏版本信息解压lib&#x2F;catalina.jar修改org&#x2F;apache&#x2F;catalina&#x2F;util&#x2F;ServerInfo.properties把server.info这一行注释\n","categories":["java"],"tags":["tomcat"]},{"title":"vim","url":"/2023/08/10/vim/","content":"vim进入编辑模式insert --&gt; normal Escnormal --&gt; insert a (append)i (insert)o (open a line below)A (append after line)I (insert before line)O (open a line above)\n\n可视化模式v 进入之后可以选择块状区域V 选中当前行^v 选择块 可以进行normal下的命令操作\n\ninsert模式下的快速纠错^h delete before char^w delete before word^u delete now line终端下同样可以使用^c ^[ 进入normal模式\n\nnormal下u 撤销^R 回撤b 光标移动到上一个单词的开头w 光标移动到下一个单词开头  W 以空白分隔的单词e 光标移动到行尾gi 从normal --&gt; 最后一次编辑的位置,并进入插入模式zz 把当前行放到中间\nvim 光标的快速移动hjkl    ^    k&lt;h     l&gt;    j    v\n\n行间搜索的快速称动f&#123;char&#125; 跳转到指定字符t&#123;char&#125; 跳转到指定字符的前一个字符F&#123;char&#125; 反向搜索; 下一个匹配, 上一个匹配\n\nvim 水平移动0 第一个字符^ 第一个非空字符$ 移动到结尾g_ 称动到行尾非空字符\nvim 垂直移动() 在句子间移动&#123;&#125; 在段落间移动\nvim 页面移动gg\t文件开头G\t文件结尾^o\t返回H\t当前页文件的开头M\t当前页文件的中间L\t当前页文件的结尾^u\t向上翻页^f\t向下翻页\nvim 的快速增删改查增： a/i/o A/I/O删： x\t删除单个字符\td 删除单词\tdaw diw \tdd 删除当前行\tdtx 删除到x的位置(x代表字符)\td$ 删除到结尾\td0 删除到开头\t\t数字加命令格式\t类似的还可以搭配数字 eg: 2dd 4x 改：\tr (replace) 替换当前字符  R 一直替换 但还是normal模式\tc (change)  C 删除当前字符并进入insert模式\tcw 删除当前单词并进入insert模式\tct&quot; 替换&quot; 之前的\ts (substitute) S 删除整行并进入insert模式查：\t/ ? 进入搜索\tn 下一个匹配\tN 上一个匹配\t＊ 当前单词前匹配  ＃当前单词后匹配\ncommand 模式下:syntax on 高亮:set nu 设置行号:vs 左右分屏:sp 上下分屏:q 退出:w 保存:% s/foo/bar/g 全局替换 把foo替换成bar\n\nvim如何搜索替换substitute 命令 ％代表全部:[ranges]s [ubstitute]/&#123;pattern&#125;/&#123;String&#125;/[flags]flags: g (global) 全局  c(confirm) 每次替换前询问  n(number) 匹配次数，不进行替换语法： :% s/self/this/g  把全局的self替换为thiseg: :1,6 s/self/this/g 把1～6行的self替换为this统计一个单词出现的次数:1,6 s/self//n:% s/quack/jiao/g 全局替换，也包括do_quack这样的:% s/\\&lt;quack\\&gt;/jiao/g  精准匹配 do_quack这样的不会被替换\nvim的多文件操作Buffer 打开一个文件的内存缓冲区window 是buffer的可视化的分割区域Tab 可以组织窗口为一个工作区\n\nBuffer缓冲区vim打开一个文件后会加载文件内容到缓冲区之后的修改都是针对内存中的缓冲区，并不会直接保存到文件直到我们执行:w(write) 把修改的内容写到文件里切换 :ls 列举当前缓冲区:bn 跳转到第几个缓冲区:bpre :bnext :bfirst :blast or :b buffer_name 可以用Tab补全:e 打开一个新的文件\n\nWindow 窗口^ws 水平分割 ^wv垂直分割^w 作为前缀 w 循环切换窗口  也可以用^w + h/j/k/l 进行窗口间的移动注：打开同一个文件，编辑时会同时生效Tab 标签页，将窗口分级是可以容纳一系列的窗口的容器（:h tabpage）vim下的Tab和其他的不太一样，可以想象成linux的虚拟桌面eg: 一个Tab全用来编辑Python  一个Tab全用来编辑HTML文件相比窗口，Tab一般用的较少，太多的Tab管理起来麻烦:tabnew hellow.py\nvim下的text Objectvim里文本也有对象的概念，一个单词w，一个句子s,一段落pdw[number]&lt;command&gt;[text object]次数    命令     文本对象iw 不包含前后空格aw 包含后空格test Obeect  a line ci&quot; 修改&quot;&quot; 之间的\nvim复制粘贴与寄存器的使用normal模式下的复制粘贴y(yank) p(paste)  剪切一行dd，p粘贴v 选中复制 y复制  yiw复制一个单词  yy复制一行insert模式下的复制粘贴# ^v  cmd v:set autoindent 设置这个命令会出现python代码错乱使用:set paste 和 :set nopaste 解决\n什么是vim的寄存器vim操作寄存器而不是系统的剪贴板（默认无名寄存器）d x 把文本对象放到寄存器，p从寄存器拿出来\n深入寄存器registervim不使用单一的剪贴板进行剪贴，复制和粘贴，而是使用多组寄存器寄存器 通过&quot;&#123;register&#125; 前缀可以指令寄存器，不指定默认无名寄存器&quot;a yiw 复制一个单词到a寄存器， &quot;b dd 剪切一行到b寄存器:reg a :reg b 查看寄存器a／b&quot;a p &quot;b ptesttest Obeect  a linevim &quot;&quot; 表示无名寄存器，defaultvim其他常见的寄存器，除了有名的寄存器a~z,vim中还有一些其他常见的寄存器复制专用寄存器 &quot;0 ,使用y复制文本对象到寄存器0系统剪贴板 &quot;+ 可以在复制前加上 &quot;+ 复制到系统剪贴板&quot;% 当前文件名  &quot;.上次插入的文本:echo has(&#x27;clipboard&#x27;) 1 表示支持:set clipboard = unnamed 可以直接复制，粘贴系统剪贴板insert 模式下 ，^R + 号可以引用系统剪贴板:e! 重新加载当前文件，不保存\n强大的vim宏什么是宏？宏可以看成是一系列命令的集合我们可以用宏「录制」一系列操作，然后用于「回放」宏可以非常方便的把一系列命令用在多行列文本上\n怎么使用录制，normal模式下，q录制，q结束使用q&#123;register&#125;选择要体存的寄存器使用＠&#123;register&#125; 回放寄存器中保存的一系列命令eg： qa I &quot; Esc A &quot; Esc q     @a     normal模式下＠a使用寄存器a里面的宏V 进入visual模式: 进入command模式: 进入命令模式: ^p 执行上一条命令\n\nvim补全大法常见的三种补全类型^n ^p 补全单词   ^x^f 补全文件名^x ^o 补全代码  需开启文件类型检查，安装插件:filetype on:set filetype:r! echo % 插入当前文件名:r! echo %:p 插入当前文件名，包含全路径\n给vim换个配色:colorscheme 显示当前的主题配色，默认是default使用:colorscheme ^d 可以显示所有配色有中意配色后，使用 :colorscheme 配色名称 来改变配色从网上下载配色https://github.com/flazz/vim-colorschemes把xxx.vim 文件 cp 到 .vim/colors文件夹下\n\n裸的vim  打字指法练习和盲打编写vim配置 ，:set number设置行号.vimrc 持久化配置用户目录下新建.vimrc文件1.set number  colorscheme hybird2.vim映射 eg：noremap &lt;leader&gt; w :w&lt;cr&gt; leader+w 键保存文件3.自定义的vimscript函数（大神使用）和vim插件的配置把常用的设置写到.vimrc文件进行持久化.vimrc里面 &quot; 表示注释vim的映射比较复杂，源于vim的多种模式1.设置leader键， let mapleader = &quot;,&quot; 常用,或者 space2.eg: inoremap&lt;leader&gt; w &lt;Esc&gt;:w&lt;cr&gt; 在插入模式下保存3.vim中映射稍微复杂，但非常强大。.vimrc生效，可以用:source ~/.vimrc  (source )后面跟的是.vimrc的路径\n\nvim 映射迷人眼什么是vim映射vim映射就是把一个操作映射到另一个操作基本映射基本映射指的是normal模式下的映射，当然还有其他模式下的映射使用map就可以实现映射:map  viw 告诉vim按下空格的时候就选中单词:map  dd 可以使用Ctrl+d执行dd删除一行unmap - 可以把- 删除映射的行为\n其他模式下的映射vim常用模式normal/visual/insert都可以定制映射用nmap/vmap/imap定义映射只在normal/visual/insert模式下生效:vmap \\ U 把在visual模式下选中的文本大小写转换U转大写u转小写insert 模式下怎么用Ctrl+d删除一行我的想法是:imap &lt;c-d&gt; &lt;End&gt; &lt;c-u&gt;  测试下我的想法是否正确  这一行是测试文本  这个想法不行ctrl+u有时候只会删除光标前面的一个单词  正确的是 :imap &lt;c-d&gt; &lt;Esc&gt;dd i\n现有映射的问题。eg： :nmap - dd :nmap \\ -这种情况下，按 \\ vim会解释其为 - ，而我们又定义了把- 映射成dd！这种情竞下 会执行dd，有点类似递归\n递归与非递归映射*map系列命令有递归的风险如果安装了一个插件，插件映射了同一个按键的不同行为，有冲突就会有一个失效想要保证插件没有递归映射没有冲突会非常痛苦解决方案就是使用非递归映射\n非递归映射，这些命令不会递归映射使用*map对应的nnoremap&#x2F;vnoremap&#x2F;inoremap何时使用递归映射，何时使用非递归映射[任何]时候都应该使用非递归映射，拯救自己的插件作者映射可以让你的vim更加好用。\n配置vim,让vim更顺手学习和使用vim,配置是vim玩家进阶的必修之路\n\nvim安装插件，竟如些简单什么是插件vim插件是使用vimscript 或者其他语言编写的vim功能扩展\n如何安装插件原始的方式是直接clone插件代码，现如今有非常多的插件管理器常见有的vim-plug,Vundel,Pathogen,Dein.vim,volt等综合性能、易用性、文档、等几个方面，这里推荐使用vim-plug\n\n使用vim-plug安装插件先安装vim-plug本身https://github.com/junegunn/vim-plug进入这个网站后先进行vim-plug的安装之后进入.vimrc写入以下配置文件执行:source ~/.vimrc\n\n第一次安装vim插件的东西，只需要在start和end 之间添加Plug ‘github.com&#x2F;之后的东西’再保存退出再进入之后:PlugInstall就可以安装成功了，下面的是在.vimrc文件里面的。\ncall plug#begin()&quot; The default plugin directory will be as follows:&quot;   - Vim (Linux/macOS): &#x27;~/.vim/plugged&#x27;&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;&quot;   - Neovim (Linux/macOS/Windows): stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27;&quot; You can specify a custom plugin directory by passing it as the argument&quot;   - e.g. `call plug#begin(&#x27;~/.vim/plugged&#x27;)`&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;&quot; Make sure you use single quotesPlug &#x27;vim-airline/vim-airline&#x27;&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-aligncall plug#end()\n\n在安装vim-plug时遇到的问题curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 14 ms: Connection refused打开ip地址查询网站：https://www.ipaddress.com/输入需要查询的网站名称raw.githubusercontent.com网站上会显示该网站的存在的ipv4以及ipv6地址，这里可以选取一个ipv4地址来进行设置打开系统host文件sudo vim /etc/hosts添加一行185.199.111.133 raw.githubusercontent.com最后再执行对应的curl命令即可\n","categories":["vim"],"tags":["vim"]},{"title":"vimrc","url":"/2023/08/10/vimrc/","content":"vimrc配置文件&quot; 设置行号set number&quot; 打开高亮syntax on&quot; set relativenumberset cursorlineset wrapset showcmdset wildmenuset hlsearchexec &quot;nohlsearch&quot;set incsearchset ignorecaseset smartcasenoremap n nzznoremap N Nzznoremap J 5jnoremap K 5k&quot; 表示注释&quot; 可以粘贴复制set mouse=r &quot; colorscheme hybrid&quot; F2 切换粘贴模式set pastetoggle=&lt;F2&gt;&quot; 搜索高亮set hlsearch&quot; 在插入模式下，按两下jj进入normal模式inoremap jj &lt;Esc&gt;&quot; use ctrl+h/j/k/l switch windownoremap &lt;C-h&gt; &lt;C-w&gt;hnoremap &lt;C-j&gt; &lt;C-w&gt;jnoremap &lt;C-k&gt; &lt;C-w&gt;knoremap &lt;C-l&gt; &lt;C-w&gt;lmap s &lt;nop&gt;noremap S :w&lt;cr&gt;noremap Q :q&lt;cr&gt;noremap SS :w!&lt;cr&gt;noremap QQ :q!&lt;cr&gt;noremap RR :source ~/.vimrc&lt;CR&gt;&quot; install vim-plug&quot; sudo vim /etc/hosts&quot; 添加一行&quot; 185.199.111.133 raw.githubusercontent.com&quot; curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&quot; :source&quot; :PlugInstallcall plug#begin()&quot; The default plugin directory will be as follows:&quot;   - Vim (Linux/macOS): &#x27;~/.vim/plugged&#x27;&quot;   - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;&quot;   - Neovim (Linux/macOS/Windows): stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27;&quot; You can specify a custom plugin directory by passing it as the argument&quot;   - e.g. `call plug#begin(&#x27;~/.vim/plugged&#x27;)`&quot;   - Avoid using standard Vim directory names like &#x27;plugin&#x27;&quot; Make sure you use single quotesPlug &#x27;vim-airline/vim-airline&#x27;Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#123; -&gt; mkdp#util#install() &#125;, &#x27;for&#x27;: [&#x27;markdown&#x27;, &#x27;vim-plug&#x27;]&#125;&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-aligncall plug#end()&quot; You can revert the settings after the call like so:&quot;   filetype indent off   &quot; Disable file-type-specific indentation&quot;   syntax off            &quot; Disable syntax highlighting&quot; :source ~/.vimrc&quot; set to 1, nvim will open the preview window after entering the markdown buffer&quot; default: 0let g:mkdp_auto_start = 0&quot; set to 1, the nvim will auto close current preview window when change&quot; from markdown buffer to another buffer&quot; default: 1let g:mkdp_auto_close = 1&quot; set to 1, the vim will refresh markdown when save the buffer or&quot; leave from insert mode, default 0 is auto refresh markdown as you edit or&quot; move the cursor&quot; default: 0let g:mkdp_refresh_slow = 0let g:mkdp_browser = &#x27;google-chrome-stable&#x27;&quot; set default theme (dark or light)&quot; By default the theme is define according to the preferences of the systemlet g:mkdp_theme = &#x27;dark&#x27;&quot; examplenmap &lt;F5&gt; &lt;Plug&gt;MarkdownPreviewnmap &lt;F6&gt; &lt;Plug&gt;MarkdownPreviewStopnmap &lt;F7&gt; &lt;Plug&gt;MarkdownPreviewToggle\n","categories":["vim"],"tags":["vim"]},{"title":"博客仓库克隆","url":"/2023/03/25/%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E5%85%8B%E9%9A%86/","content":"安装博客需要的工具sudo pacman -S nodejs npm node -vnpm -v\n\n利用npm安装cnpmsudo npm install -g cnpm --registry=https://registry.npm.taobao.orgsudo cnpm install -g hexo-clihexo -v\n\ngit clone 下来后cd bloghexo clean 报错#按提示执行下面命令 rm -rf node_modules &amp;&amp; cnpm install --forcesudo hexo cleanError: Cannot find module &#x27;hexo-util&#x27;cnpm install hexo-util --savesudo hexo gNo layout: index.htmlrm -rf themes/arknights#克隆主题git clone https://github.com/Yue-plus/hexo-theme-arknights.git themes/arknights#主题依赖的安装cnpm install hexo-server hexo-browsersync hexo-renderer-pug --savesudo hexo shttps://localhost:4000\n可以查看到博客内容说明克隆成功\n部署到远端cnpm install --save hexo-deployer-git#ssh-add ~/.ssh/id_rsa#ssh-agent bashssh-keygen -t rsa#用原来的旧的公私钥替换掉新的#确保new上的两个文件的权限，id_rsa 600 id_rsa.pub 644chmod 600 id_rsassh-agent -sssh-add ~/.ssh/id_rsassh -T git@github.com\n","categories":["blog"],"tags":["blog"]},{"title":"博客相关配置","url":"/2022/12/20/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/","content":"hexo d 报错修改\n_config.yml 最后面的deploy    deploy:     type: &#x27;git&#x27;     repo: git@github.com:ucgfeng/ucgfeng.github.io.git     branch: main.deploy_git/.git/config\n\n\nblog 主题安装依赖git clone https://github.com/Yue-plus/hexo-theme-arknights.git themes/arknights\nnpm 用户：\ncnpm install hexo-server hexo-browsersync hexo-renderer-pug --save\n修改配置文件参照 Hexo 官网 修改 Hexo&#x2F; 目录下的 _config.yml。\n把 theme: 的值改为 arknights开启代码高亮：highlight:  hljs: true剪切 Hexo&#x2F;themes&#x2F;arknights&#x2F;_config.yml 到 Hexo 目录下，并重命名为 _config.arknights.yml。\n建议参考：使用代替主题配置文件主题的配置文件可参照中文注释修改。\n博客上传图片在source 下创建 pics 文件夹\n在md文件里写路径 时，前面记得加 &#x2F; ，如：![](/pics/xxx.png)\n","categories":["blog"],"tags":["blog"]},{"title":"网站","url":"/2023/10/12/%E7%BD%91%E7%AB%99/","content":"linuxhttp://linux.51yip.com/\n画图https://excalidraw.com/\n编码转换https://www.toolhelper.cn/EncodeDecode/EncodeDecode\n星火https://xinghuo.xfyun.cn/desk\nArch Linux办公环境安装配置新手入门基础教程https://www.lizi.tw/soft/10345.html\n正则在线测试https://c.runoob.com/front-end/854/?optionGlobl=global\n","categories":["网站"],"tags":["网站"]}]